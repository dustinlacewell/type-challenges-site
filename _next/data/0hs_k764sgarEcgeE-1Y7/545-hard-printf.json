{"pageProps":{"dir":"545-hard-printf","id":"545","challenge":"hard","info":{"difficulty":"hard","title":"printf","tags":"template-literal","author":{"github":"BestMaster-YS","name":null}},"prefix":"<!--info-header-start--><h1>printf <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by null <a href=\"https://github.com/BestMaster-YS\" target=\"_blank\">@BestMaster-YS</a></p></blockquote><p><a href=\"https://tsch.js.org/545/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement `Format<T extends string>` generic.\r\n\r\nFor example,\r\n\r\n```ts\r\ntype FormatCase1 = Format<\"%sabc\"> // FormatCase1 : string => string\r\ntype FormatCase2 = Format<\"%s%dabc\"> // FormatCase2 : string => number => string\r\ntype FormatCase3 = Format<\"sdabc\"> // FormatCase3 :  string\r\ntype FormatCase4 = Format<\"sd%abc\"> // FormatCase4 :  string\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/545/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/545/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Format<'abc'>, string>>,\r\n  Expect<Equal<Format<'a%sbc'>, (s1: string) => string>>,\r\n  Expect<Equal<Format<'a%dbc'>, (d1: number) => string>>,\r\n  Expect<Equal<Format<'a%dbc%s'>, (d1: number) => (s1: string) => string>>\r\n]\n","content":"type Format<T extends string> = any\n"},"__N_SSG":true}