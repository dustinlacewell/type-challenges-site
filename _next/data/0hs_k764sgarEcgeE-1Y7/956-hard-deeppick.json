{"pageProps":{"dir":"956-hard-deeppick","id":"956","challenge":"hard","info":{"difficulty":"hard","title":"DeepPick","tags":"deep","author":{"github":"hiroyaiizuka","name":"hiroya iizuka"}},"prefix":"<!--info-header-start--><h1>DeepPick <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23deep-999\" alt=\"#deep\"/></h1><blockquote><p>by hiroya iizuka <a href=\"https://github.com/hiroyaiizuka\" target=\"_blank\">@hiroyaiizuka</a></p></blockquote><p><a href=\"https://tsch.js.org/956/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type DeepPick, that extends Utility types `Pick`.\r\nA type takes two arguments.\r\n\r\n\r\nFor example:\r\n\r\n```\r\n\r\ntype obj = {\r\n  name: 'hoge', \r\n  age: 20,\r\n  friend: {\r\n    name: 'fuga',\r\n    age: 30,\r\n    family: {\r\n      name: 'baz',  \r\n      age: 1 \r\n    }\r\n  }\r\n}\r\n\r\ntype T1 = DeepPick<obj, 'name'>   // { name : 'hoge' }\r\ntype T2 = DeepPick<obj, 'name' | 'friend.name'>  // { name : 'hoge' } & { friend: { name: 'fuga' }}\r\ntype T3 = DeepPick<obj, 'name' | 'friend.name' |  'friend.family.name'>  // { name : 'hoge' } &  { friend: { name: 'fuga' }} & { friend: { family: { name: 'baz' }}}\r\n\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/956/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/956/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype Obj = {\r\n  a: number,\r\n  b: string,\r\n  c:  boolean,\r\n  obj: {\r\n    d: number,\r\n    e: string,\r\n    f:  boolean,\r\n    obj2: {\r\n      g: number,\r\n      h: string,\r\n      i: boolean,\r\n    }\r\n  },\r\n  obj3: {\r\n    j: number,\r\n    k: string,\r\n    l: boolean,\r\n  }\r\n}\r\n\r\ntype cases = [\r\n  Expect<Equal<DeepPick<Obj, ''>, unknown >>,\r\n  Expect<Equal<DeepPick<Obj, 'a'>, { a: number }>>,\r\n  Expect<Equal<DeepPick<Obj, 'a' | 'obj.e'>, { a: number } & { obj: { e: string }}>>,\r\n  Expect<Equal<DeepPick<Obj, 'a' | 'obj.e' | 'obj.obj2.i'>, { a: number } & { obj: { e: string }} & { obj: { obj2: { i: boolean } }}>>,\r\n]\n","content":"type DeepPick = any\n"},"__N_SSG":true}