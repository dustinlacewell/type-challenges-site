{"pageProps":{"dir":"730-hard-union-to-tuple","id":"730","challenge":"hard","info":{"difficulty":"hard","title":"Union to Tuple","tags":"union, tuple, infer","related":55,"author":{"github":"suica","name":"Sg"}},"prefix":"<!--info-header-start--><h1>Union to Tuple <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/> <img src=\"https://img.shields.io/badge/-%23tuple-999\" alt=\"#tuple\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/></h1><blockquote><p>by Sg <a href=\"https://github.com/suica\" target=\"_blank\">@suica</a></p></blockquote><p><a href=\"https://tsch.js.org/730/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type, `UnionToTuple`, that converts a union to a tuple.\r\n\r\nAs we know, union is an unordered structure, but tuple is an ordered, which implies that we are not supposed to preassume any order will be preserved between terms of one union, when unions are created or transformed. \r\n\r\nHence in this challenge, **any permutation of the elements in the output tuple is acceptable**.\r\n\r\nYour type should resolve to one of the following two types, but ***NOT*** a union of them!\r\n```ts\r\nUnionToTuple<1>           // [1], and correct\r\nUnionToTuple<'any' | 'a'> // ['any','a'], and correct\r\n```\r\nor \r\n```ts\r\nUnionToTuple<'any' | 'a'> // ['a','any'], and correct\r\n```\r\nIt shouldn't be a union of all acceptable tuples...\r\n```ts\r\nUnionToTuple<'any' | 'a'> // ['a','any'] | ['any','a'], which is incorrect\r\n```\r\n\r\n\r\nAnd a union could collapes, which means some types could absorb (or be absorbed by) others and there is no way to prevent this absorption. See the following examples:\r\n```ts\r\nEqual<UnionToTuple<any | 'a'>,       UnionToTuple<any>>         // will always be a true\r\nEqual<UnionToTuple<unknown | 'a'>,   UnionToTuple<unknown>>     // will always be a true\r\nEqual<UnionToTuple<never | 'a'>,     UnionToTuple<'a'>>         // will always be a true\r\nEqual<UnionToTuple<'a' | 'a' | 'a'>, UnionToTuple<'a'>>         // will always be a true\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/730/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/730/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/55-hard-union-to-intersection/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-55%E3%83%BBUnion%20to%20Intersection-de3d37\" alt=\"55ãƒ»Union to Intersection\"/></a> <!--info-footer-end-->","suffix":"import {Equal, Expect} from '@type-challenges/utils'\r\n\r\ntype ExtractValuesOfTuple<T extends any[]> = T[keyof T & number]\r\n\r\ntype cases = [\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'a' | 'b'>>, 'a' | 'b'>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'a'>>, 'a'>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<any>>, any>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<undefined | void | 1>>, void | 1>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<any | 1>>, any | 1>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<any | 1>>, any>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'d' | 'f' | 1 | never>>, 'f' | 'd' | 1>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<[{ a: 1 }] | 1>>, [{ a: 1 }] | 1>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<never>>, never>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'a' | 'b' | 'c' | 1 | 2 | 'd' | 'e' | 'f' | 'g'>>, 'f' | 'e' | 1 | 2 | 'g' | 'c' | 'd' | 'a' | 'b'>>,\r\n]\n","content":"type UnionToTuple<T> = any\n"},"__N_SSG":true}