{"pageProps":{"dir":"1290-hard-pinia","id":"1290","challenge":"hard","info":{"difficulty":"hard","title":"Pinia","tags":"this, vue","author":{"github":"g-plane","name":"Pig Fang"}},"prefix":"<!--info-header-start--><h1>Pinia <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23this-999\" alt=\"#this\"/> <img src=\"https://img.shields.io/badge/-%23vue-999\" alt=\"#vue\"/></h1><blockquote><p>by Pig Fang <a href=\"https://github.com/g-plane\" target=\"_blank\">@g-plane</a></p></blockquote><p><a href=\"https://tsch.js.org/1290/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nCreate a type-level function whose types is similar to [Pinia](https://github.com/posva/pinia) library. You don't need to implement function actually, just adding types.\r\n\r\n### Overview\r\n\r\nThis function receive only one parameter whose type is an object. The object contains 4 properties:\r\n\r\n- `id` - just a string (required)\r\n- `state` - a function which will return an object as store's state (required)\r\n- `getters` - an object with methods which is similar to Vue's computed values or Vuex's getters, and details are below (optional)\r\n- `actions` - an object with methods which can do side effects and mutate state, and details are below (optional)\r\n\r\n### Getters\r\n\r\nWhen you define a store like this:\r\n\r\n```typescript\r\nconst store = defineStore({\r\n  // ...other required fields\r\n  getters: {\r\n    getSomething() {\r\n      return 'xxx'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nAnd you should use it like this:\r\n\r\n```typescript\r\nstore.getSomething\r\n```\r\n\r\ninstead of:\r\n\r\n```typescript\r\nstore.getSomething()  // error\r\n```\r\n\r\nAdditionally, getters can access state and/or other getters via `this`, but state is read-only.\r\n\r\n### Actions\r\n\r\nWhen you define a store like this:\r\n\r\n```typescript\r\nconst store = defineStore({\r\n  // ...other required fields\r\n  actions: {\r\n    doSideEffect() {\r\n      this.xxx = 'xxx'\r\n      return 'ok'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nUsing it is just to call it:\r\n\r\n```typescript\r\nconst returnValue = store.doSideEffect()\r\n```\r\n\r\nActions can return any value or return nothing, and it can receive any number of parameters with different types.\r\nParameters types and return type can't be lost, which means type-checking must be available at call side.\r\n\r\nState can be accessed and mutated via `this`. Getters can be accessed via `this` but they're read-only.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1290/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1290/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\nconst store = defineStore({\r\n  id: '',\r\n  state: () => ({\r\n    num: 0,\r\n    str: '',\r\n  }),\r\n  getters: {\r\n    stringifiedNum() {\r\n      // @ts-expect-error\r\n      this.num += 1\r\n\r\n      return this.num.toString()\r\n    },\r\n    parsedNum() {\r\n      return parseInt(this.stringifiedNum)\r\n    },\r\n  },\r\n  actions: {\r\n    init() {\r\n      this.reset()\r\n      this.increment()\r\n    },\r\n    increment(step = 1) {\r\n      this.num += step\r\n    },\r\n    reset() {\r\n      this.num = 0\r\n\r\n      // @ts-expect-error\r\n      this.parsedNum = 0\r\n\r\n      return true\r\n    },\r\n    setNum(value: number) {\r\n      this.num = value\r\n    },\r\n  },\r\n})\r\n\r\n// @ts-expect-error\r\nstore.nopeStateProp\r\n// @ts-expect-error\r\nstore.nopeGetter\r\n// @ts-expect-error\r\nstore.stringifiedNum()\r\nstore.init()\r\n// @ts-expect-error\r\nstore.init(0)\r\nstore.increment()\r\nstore.increment(2)\r\n// @ts-expect-error\r\nstore.setNum()\r\n// @ts-expect-error\r\nstore.setNum('3')\r\nstore.setNum(3)\r\nconst r = store.reset()\r\n\r\ntype _tests = [\r\n  Expect<Equal<typeof store.num, number>>,\r\n  Expect<Equal<typeof store.str, string>>,\r\n  Expect<Equal<typeof store.stringifiedNum, string>>,\r\n  Expect<Equal<typeof store.parsedNum, number>>,\r\n  Expect<Equal<typeof r, true>>\r\n]\n","content":"declare function defineStore(store: unknown): unknown\n"},"__N_SSG":true}