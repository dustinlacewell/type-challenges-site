{"pageProps":{"dir":"472-hard-tuple-to-enum-object","id":"472","challenge":"hard","info":{"difficulty":"hard","title":"Tuple to Enum Object","tags":"tuple, template-literal","author":{"github":"softoika","name":"Ryo Hanafusa"}},"prefix":"<!--info-header-start--><h1>Tuple to Enum Object <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23tuple-999\" alt=\"#tuple\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Ryo Hanafusa <a href=\"https://github.com/softoika\" target=\"_blank\">@softoika</a></p></blockquote><p><a href=\"https://tsch.js.org/472/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nThe enum is an original syntax of TypeScript (it does not exist in JavaScript). So it is converted to like the following form as a result of transpilation:\r\n```js\r\nlet OperatingSystem;\r\n(function (OperatingSystem) {\r\n    OperatingSystem[OperatingSystem[\"MacOS\"] = 0] = \"MacOS\";\r\n    OperatingSystem[OperatingSystem[\"Windows\"] = 1] = \"Windows\";\r\n    OperatingSystem[OperatingSystem[\"Linux\"] = 2] = \"Linux\";\r\n})(OperatingSystem || (OperatingSystem = {}));\r\n```\r\nIn this question, the type should convert a given string tuple to an object that behaves like an enum.\r\nMoreover, the property of an enum is preferably a pascal case.\r\n```ts\r\nEnum<[\"macOS\", \"Windows\", \"Linux\"]>\r\n// -> { readonly MacOS: \"macOS\", readonly Windows: \"Windows\", readonly Linux: \"Linux\" }\r\n```\r\nIf `true` is given in the second argument, the value should be a number literal.\r\n```ts\r\nEnum<[\"macOS\", \"Windows\", \"Linux\"], true>\r\n// -> { readonly MacOS: 0, readonly Windows: 1, readonly Linux: 2 }\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/472/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/472/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\nconst OperatingSystem = ['macOS', 'Windows', 'Linux'] as const\r\nconst Command = ['echo', 'grep', 'sed', 'awk', 'cut', 'uniq', 'head', 'tail', 'xargs', 'shift'] as const\r\n\r\ntype cases = [\r\n  Expect<Equal<Enum<[]>, {}>>,\r\n  Expect<Equal<\r\n  Enum<typeof OperatingSystem>,\r\n  {\r\n    readonly MacOS: 'macOS'\r\n    readonly Windows: 'Windows'\r\n    readonly Linux: 'Linux'\r\n  }\r\n  >>,\r\n  Expect<Equal<\r\n  Enum<typeof OperatingSystem, true>,\r\n  {\r\n    readonly MacOS: 0\r\n    readonly Windows: 1\r\n    readonly Linux: 2\r\n  }\r\n  >>,\r\n  Expect<Equal<\r\n  Enum<typeof Command>,\r\n  {\r\n    readonly Echo: 'echo'\r\n    readonly Grep: 'grep'\r\n    readonly Sed: 'sed'\r\n    readonly Awk: 'awk'\r\n    readonly Cut: 'cut'\r\n    readonly Uniq: 'uniq'\r\n    readonly Head: 'head'\r\n    readonly Tail: 'tail'\r\n    readonly Xargs: 'xargs'\r\n    readonly Shift: 'shift'\r\n  }\r\n  >>,\r\n  Expect<Equal<\r\n  Enum<typeof Command, true>,\r\n  {\r\n    readonly Echo: 0\r\n    readonly Grep: 1\r\n    readonly Sed: 2\r\n    readonly Awk: 3\r\n    readonly Cut: 4\r\n    readonly Uniq: 5\r\n    readonly Head: 6\r\n    readonly Tail: 7\r\n    readonly Xargs: 8\r\n    readonly Shift: 9\r\n  }\r\n  >>\r\n]\r\n","content":"type Enum<T extends readonly string[], N extends boolean = false> = any\n"},"__N_SSG":true}