{"pageProps":{"dir":"2-medium-return-type","id":"2","challenge":"medium","info":{"title":"Get Return Type","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"infer, built-in","tsconfig":null,"original_issues":null,"recommended_solutions":null},"prefix":"<!--info-header-start--><h1>Get Return Type <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/> <img src=\"https://img.shields.io/badge/-%23built--in-999\" alt=\"#built-in\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/2/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the built-in `ReturnType<T>` generic without using it.\n\nFor example\n\n```ts\nconst fn = (v: boolean) => {\n  if (v)\n    return 1\n  else\n    return 2\n}\n\ntype a = MyReturnType<typeof fn> // should be \"1 | 2\"\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/2/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/2/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<string, MyReturnType<() => string>>>,\n  Expect<Equal<123, MyReturnType<() => 123>>>,\n  Expect<Equal<ComplexObject, MyReturnType<() => ComplexObject>>>,\n  Expect<Equal<Promise<boolean>, MyReturnType<() => Promise<boolean>>>>,\n  Expect<Equal<() => 'foo', MyReturnType<() => () => 'foo'>>>,\n  Expect<Equal<1 | 2, MyReturnType<typeof fn>>>,\n  Expect<Equal<1 | 2, MyReturnType<typeof fn1>>>,\n]\n\ntype ComplexObject = {\n  a: [12, 'foo']\n  bar: 'hello'\n  prev(): number\n}\n\nconst fn = (v: boolean) => v ? 1 : 2\nconst fn1 = (v: boolean, w: any) => v ? 1 : 2\n","content":"type MyReturnType<T> = any\n"},"__N_SSG":true}