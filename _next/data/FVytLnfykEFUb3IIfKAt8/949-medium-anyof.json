{"pageProps":{"dir":"949-medium-anyof","id":"949","challenge":"medium","info":{"difficulty":"medium","title":"AnyOf","tags":"array","author":{"github":"kynefuk","name":null}},"prefix":"<!--info-header-start--><h1>AnyOf <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by null <a href=\"https://github.com/kynefuk\" target=\"_blank\">@kynefuk</a></p></blockquote><p><a href=\"https://tsch.js.org/949/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement Python liked `any` function in the type system. A type takes the Array and returns `true` if any element of the Array is true. If the Array is empty, return `false`.\r\n\r\nFor example:\r\n\r\n```ts\r\ntype Sample1 = AnyOf<[1, \"\", false, [], {}]>; // expected to be true.\r\ntype Sample2 = AnyOf<[0, \"\", false, [], {}]>; // expected to be false.\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/949/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/949/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<AnyOf<[1, 'test', true, [1], {name: 'test'}, {1: 'test'}]>, true>>,\r\n  Expect<Equal<AnyOf<[1, '', false, [], {}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, 'test', false, [], {}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', true, [], {}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [1], {}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [], {name: 'test'}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [], {1: 'test'}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [], {name: 'test'}, {1: 'test'}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [], {}]>, false>>,\r\n  Expect<Equal<AnyOf<[]>, false>>,\r\n]\n","content":"type AnyOf<T extends readonly any[]> = any;\n"},"__N_SSG":true}