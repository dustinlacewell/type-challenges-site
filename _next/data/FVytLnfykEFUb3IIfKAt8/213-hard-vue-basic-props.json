{"pageProps":{"dir":"213-hard-vue-basic-props","id":"213","challenge":"hard","info":{"difficulty":"hard","title":"Vue Basic Props","tags":"vue, application","related":6,"author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Vue Basic Props <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23vue-999\" alt=\"#vue\"/> <img src=\"https://img.shields.io/badge/-%23application-999\" alt=\"#application\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/213/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\n**This challenge continues from [6 - Simple Vue](//tsch.js.org/6), you should finish that one first, and modify your code based on it to start this challenge**.\r\n\r\nIn addition to the Simple Vue, we are now having a new `props` field in the options. This is a simplified version of Vue's `props` option. Here are some of the rules.\r\n\r\n`props` is an object containing each field as the key of the real props injected into `this`. The injected props will be accessible in all the context including `data`, `computed`, and `methods`.\r\n\r\nA prop will be defined either by a constructor or an object with a `type` field containing constructor(s).\r\n\r\nFor example\r\n\r\n```js\r\nprops: {\r\n  foo: Boolean\r\n}\r\n// or\r\nprops: {\r\n  foo: { type: Boolean }\r\n}\r\n```\r\n\r\nshould be inferred to `type Props = { foo: boolean }`.\r\n\r\nWhen passing multiple constructors, the type should be inferred to a union.\r\n\r\n```ts\r\nprops: {\r\n  foo: { type: [Boolean, Number, String] }\r\n}\r\n// -->\r\ntype Props = { foo: boolean | number | string }\r\n```\r\n\r\nWhen an empty object is passed, the key should be inferred to `any`.\r\n\r\nFor more specified cases, check out the Test Cases section.\r\n\r\n> `required`, `default`, and array props in Vue are not considered in this challenge.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/213/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/213/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/6-hard-simple-vue/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-6%E3%83%BBSimple%20Vue-de3d37\" alt=\"6・Simple Vue\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, IsAny, Debug } from '@type-challenges/utils'\r\n\r\nclass ClassA {}\r\n\r\nVueBasicProps({\r\n  props: {\r\n    propA: {},\r\n    propB: { type: String },\r\n    propC: { type: Boolean },\r\n    propD: { type: ClassA },\r\n    propE: { type: [String, Number] },\r\n    propF: RegExp,\r\n  },\r\n  data(this) {\r\n    type PropsType = Debug<typeof this>\r\n    type cases = [\r\n      Expect<IsAny<PropsType['propA']>>,\r\n      Expect<Equal<PropsType['propB'], string>>,\r\n      Expect<Equal<PropsType['propC'], boolean>>,\r\n      Expect<Equal<PropsType['propD'], ClassA>>,\r\n      Expect<Equal<PropsType['propE'], string | number>>,\r\n      Expect<Equal<PropsType['propF'], RegExp>>,\r\n    ]\r\n\r\n    // @ts-expect-error\r\n    this.firstname\r\n    // @ts-expect-error\r\n    this.getRandom()\r\n    // @ts-expect-error\r\n    this.data()\r\n  \r\n    return {\r\n      firstname: 'Type',\r\n      lastname: 'Challenges',\r\n      amount: 10,\r\n    }\r\n  },\r\n  computed: {\r\n    fullname() {\r\n      return `${this.firstname} ${this.lastname}`\r\n    },\r\n  },\r\n  methods: {\r\n    getRandom() {\r\n      return Math.random()\r\n    },\r\n    hi() {\r\n      alert(this.fullname.toLowerCase())\r\n      alert(this.getRandom())\r\n    },\r\n    test() {\r\n      const fullname = this.fullname\r\n      const propE = this.propE\r\n      type cases = [\r\n        Expect<Equal<typeof fullname, string>>,\r\n        Expect<Equal<typeof propE, string | number>>,\r\n      ]\r\n    },\r\n  },\r\n})\n","content":"declare function VueBasicProps(options: any): any\n"},"__N_SSG":true}