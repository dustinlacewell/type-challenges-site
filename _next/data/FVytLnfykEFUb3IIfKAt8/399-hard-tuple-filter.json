{"pageProps":{"dir":"399-hard-tuple-filter","id":"399","challenge":"hard","info":{"difficulty":"hard","title":"Tuple Filter","tags":"tuple, infer","author":{"github":"softoika","name":"Ryo Hanafusa"}},"prefix":"<!--info-header-start--><h1>Tuple Filter <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23tuple-999\" alt=\"#tuple\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/></h1><blockquote><p>by Ryo Hanafusa <a href=\"https://github.com/softoika\" target=\"_blank\">@softoika</a></p></blockquote><p><a href=\"https://tsch.js.org/399/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement a type `FilterOut<T, F>` that filters out items of the given type `F` from the tuple `T`.\r\n\r\nFor example,\r\n```ts\r\ntype Filtered = FilterOut<[1, 2, null, 3], null> // [1, 2, 3]\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/399/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/399/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<FilterOut<[], never>, []>>,\r\n  Expect<Equal<FilterOut<[never], never>, []>>,\r\n  Expect<Equal<FilterOut<['a', never], never>, ['a']>>,\r\n  Expect<Equal<FilterOut<[1, never, 'a'], never>, [1, 'a']>>,\r\n  Expect<Equal<FilterOut<[never, 1, 'a', undefined, false, null], never | null | undefined>, [1, 'a', false]>>,\r\n  Expect<Equal<FilterOut<[number | null | undefined, never], never | null | undefined>, [number | null | undefined]>>\r\n]\n","content":"type FilterOut<T extends any[], F> = any\n"},"__N_SSG":true}