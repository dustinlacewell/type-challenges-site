{"pageProps":{"dir":"147-hard-c-printf-parser","id":"147","challenge":"hard","info":{"difficulty":"hard","title":"C-printf Parser","tags":"template-literal","author":{"github":"g-plane","name":"Pig Fang"}},"prefix":"<!--info-header-start--><h1>C-printf Parser <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Pig Fang <a href=\"https://github.com/g-plane\" target=\"_blank\">@g-plane</a></p></blockquote><p><a href=\"https://tsch.js.org/147/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nThere is a function in C language: `printf`. This function allows us to print something with formatting. Like this:\r\n\r\n```c\r\nprintf(\"The result is %d.\", 42);\r\n```\r\n\r\nThis challenge requires you to parse the input string and extract the format placeholders like `%d` and `%f`. For example, if the input string is `\"The result is %d.\"`, the parsed result is a tuple `['dec']`.\r\n\r\nHere is the mapping:\r\n\r\n```typescript\r\ntype ControlsMap = {\r\n  c: 'char',\r\n  s: 'string',\r\n  d: 'dec',\r\n  o: 'oct',\r\n  h: 'hex',\r\n  f: 'float',\r\n  p: 'pointer',\r\n}\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/147/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/147/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<ParsePrintFormat<''>, []>>,\r\n  Expect<Equal<ParsePrintFormat<'Any string.'>, []>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %d.'>, ['dec']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %%d.'>, []>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %%%d.'>, ['dec']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %f.'>, ['float']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %h.'>, ['hex']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %q.'>, []>>,\r\n  Expect<Equal<ParsePrintFormat<'Hello %s: score is %d.'>, ['string', 'dec']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %'>, []>>\r\n]\n","content":"type ControlsMap = {\r\n  c: 'char',\r\n  s: 'string',\r\n  d: 'dec',\r\n  o: 'oct',\r\n  h: 'hex',\r\n  f: 'float',\r\n  p: 'pointer',\r\n}\r\n\r\ntype ParsePrintFormat = any\n"},"__N_SSG":true}