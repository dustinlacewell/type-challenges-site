{"pageProps":{"dir":"43-easy-exclude","id":"43","challenge":"easy","info":{"difficulty":"easy","title":"Exclude","author":{"github":"zheeeng","name":"Zheeeng"},"tags":"built-in"},"prefix":"<!--info-header-start--><h1>Exclude <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23built--in-999\" alt=\"#built-in\"/></h1><blockquote><p>by Zheeeng <a href=\"https://github.com/zheeeng\" target=\"_blank\">@zheeeng</a></p></blockquote><p><a href=\"https://tsch.js.org/43/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the built-in Exclude<T, U>\r\n> Exclude from T those types that are assignable to U\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/43/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/43/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    Expect<Equal<MyExclude<\"a\" | \"b\" | \"c\", \"a\">, Exclude<\"a\" | \"b\" | \"c\", \"a\">>>,\r\n    Expect<Equal<MyExclude<\"a\" | \"b\" | \"c\", \"a\" | \"b\">, Exclude<\"a\" | \"b\" | \"c\", \"a\" | \"b\">>>,\r\n    Expect<Equal<MyExclude<string | number | (() => void), Function>, Exclude<string | number | (() => void), Function>>>,\r\n]\n","content":"type MyExclude<T, U> = any\n"},"__N_SSG":true}