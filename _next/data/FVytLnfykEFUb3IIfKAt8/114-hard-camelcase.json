{"pageProps":{"dir":"114-hard-camelcase","id":"114","challenge":"hard","info":{"difficulty":"hard","title":"CamelCase","tags":"template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>CamelCase <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/114/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement `CamelCase<T>` which converts `snake_case` string to `camelCase`.\r\n\r\nFor example\r\n\r\n```ts\r\ntype camelCase1 = CamelCase<'hello_world_with_types'> // expected to be 'helloWorldWithTypes'\r\ntype camelCase2 = CamelCase<'HELLO_WORLD_WITH_TYPES'> // expected to be same as previous one\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/114/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/114/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<CamelCase<'foobar'>, 'foobar'>>,\r\n  Expect<Equal<CamelCase<'FOOBAR'>, 'foobar'>>,\r\n  Expect<Equal<CamelCase<'foo_bar'>, 'fooBar'>>,\r\n  Expect<Equal<CamelCase<'foo_bar_hello_world'>, 'fooBarHelloWorld'>>,\r\n  Expect<Equal<CamelCase<'HELLO_WORLD_WITH_TYPES'>, 'helloWorldWithTypes'>>,\r\n  Expect<Equal<CamelCase<''>, ''>>,\r\n]\n","content":"type CamelCase<S extends string> = any\n"},"__N_SSG":true}