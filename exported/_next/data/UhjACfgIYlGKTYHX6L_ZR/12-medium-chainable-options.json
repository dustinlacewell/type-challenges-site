{"pageProps":{"dir":"12-medium-chainable-options","id":"12","challenge":"medium","info":{"title":"Chainable Options","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"application"},"prefix":"<!--info-header-start--><h1>Chainable Options <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23application-999\" alt=\"#application\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/12/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nChainable options are commonly used in Javascript. But when we switch to TypeScript, can you properly type it?\n\nIn this challenge, you need to type an object or a class - whatever you like - to provide two function `option(key, value)` and `get()`. In `option`, you can extend the current config type by the given key and value. We should about to access the final result via `get`.\n\nFor example\n\n```ts\ndeclare const config: Chainable\n\nconst result = config\n  .option('foo', 123)\n  .option('name', 'type-challenges')\n  .option('bar', { value: 'Hello World' })\n  .get()\n\n// expect the type of result to be:\ninterface Result {\n  foo: number\n  name: string\n  bar: {\n    value: string\n  }\n}\n```\n\nYou don't need to write any js/ts logic to handle the problem - just in type level. \n\nYou can assume that `key` only accepts `string` and the `value` can be anything - just leave it as-is. Same `key` won't be passed twice.\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/12/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/12/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\n","suffix":"import { Alike, Expect } from '@type-challenges/utils'\n\ndeclare const a: Chainable\n\nconst result = a\n  .option('foo', 123)\n  .option('bar', { value: 'Hello World' })\n  .option('name', 'type-challenges')\n  .get()\n\ntype cases = [\n  Expect<Alike<typeof result, Expected>>\n]\n\ntype Expected = {\n  foo: number\n  bar: {\n    value: string\n  }\n  name: string\n}\n","content":"type Chainable = {\n  option(key: string, value: any): any\n  get(): any\n}\n"},"__N_SSG":true}