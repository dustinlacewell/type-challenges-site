{"pageProps":{"dir":"1130-medium-replacekeys","id":"1130","challenge":"medium","info":{"difficulty":"medium","title":"ReplaceKeys","author":{"github":"lullabyjune","name":"贱贱"}},"prefix":"<!--info-header-start--><h1>ReplaceKeys <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> </h1><blockquote><p>by 贱贱 <a href=\"https://github.com/lullabyjune\" target=\"_blank\">@lullabyjune</a></p></blockquote><p><a href=\"https://tsch.js.org/1130/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type ReplaceKeys, that replace keys in union types, if some type has not this key, just skip replacing,\r\nA type takes three arguments. \r\n\r\n\r\nFor example:\r\n\r\n```ts\r\ntype NodeA = {\r\n  type: 'A'\r\n  name: string\r\n  flag: number\r\n}\r\n\r\ntype NodeB = {\r\n  type: 'B'\r\n  id: number\r\n  flag: number\r\n}\r\n\r\ntype NodeC = {\r\n  type: 'C'\r\n  name: string\r\n  flag: number\r\n}\r\n\r\n\r\ntype Nodes = NodeA | NodeB | NodeC\r\n\r\ntype ReplacedNodes = ReplaceKeys<Nodes, 'name' | 'flag', {name: number, flag: string}> // {type: 'A', name: number, flag: string} | {type: 'B', id: number, flag: string} | {type: 'C', name: number, flag: string} // would replace name from string to number, replace flag from number to string.\r\n\r\ntype ReplacedNotExistKeys = ReplaceKeys<Nodes, 'name', {aa: number}> // {type: 'A', name: never} | NodeB | {type: 'C', name: never} // would replace name to never\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1130/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1130/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype NodeA = {\r\n  type: 'A'\r\n  name: string\r\n  flag: number\r\n}\r\n\r\ntype NodeB = {\r\n  type: 'B'\r\n  id: number\r\n  flag: number\r\n}\r\n\r\ntype NodeC = {\r\n  type: 'C'\r\n  name: string\r\n  flag: number\r\n}\r\n\r\ntype ReplacedNodeA = {\r\n  type: 'A'\r\n  name: number\r\n  flag: string\r\n}\r\n\r\ntype ReplacedNodeB = {\r\n  type: 'B'\r\n  id: number\r\n  flag: string\r\n}\r\n\r\ntype ReplacedNodeC = {\r\n  type: 'C'\r\n  name: number\r\n  flag: string\r\n}\r\n\r\ntype NoNameNodeA = {\r\n  type: 'A'\r\n  flag: number\r\n  name: never\r\n}\r\n\r\ntype NoNameNodeC = {\r\n  type: 'C'\r\n  flag: number\r\n  name: never\r\n}\r\n\r\ntype Nodes = NodeA | NodeB | NodeC\r\ntype ReplacedNodes = ReplacedNodeA | ReplacedNodeB | ReplacedNodeC\r\ntype NodesNoName = NoNameNodeA | NoNameNodeC | NodeB\r\n\r\ntype cases = [\r\n  Expect<Equal<ReplaceKeys<Nodes, 'name' | 'flag', {name: number; flag: string}>, ReplacedNodes>>,\r\n  Expect<Equal<ReplaceKeys<Nodes, 'name', {aa: number}>, NodesNoName>>,\r\n]\n","content":"type ReplaceKeys<U, T, Y> = any\n"},"__N_SSG":true}