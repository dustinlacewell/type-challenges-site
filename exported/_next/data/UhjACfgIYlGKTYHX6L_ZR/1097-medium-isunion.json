{"pageProps":{"dir":"1097-medium-isunion","id":"1097","challenge":"medium","info":{"difficulty":"medium","title":"IsUnion","author":{"github":"bencor","name":null}},"prefix":"<!--info-header-start--><h1>IsUnion <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> </h1><blockquote><p>by null <a href=\"https://github.com/bencor\" target=\"_blank\">@bencor</a></p></blockquote><p><a href=\"https://tsch.js.org/1097/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type `IsUnion`, which takes an input type `T` and returns whether `T` resolves to a union type.\r\n\r\nFor example:\r\n  \r\n  ```ts\r\n  type case1 = IsUnion<string>  // false\r\n  type case2 = IsUnion<string|number>  // true\r\n  type case3 = IsUnion<[string|number]>  // false\r\n  ```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1097/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1097/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<IsUnion<string>, false >>,\r\n  Expect<Equal<IsUnion<string|number>, true >>,\r\n  Expect<Equal<IsUnion<'a'|'b'|'c'|'d'>, true >>,\r\n  Expect<Equal<IsUnion<undefined|null|void|''>, true >>,\r\n  Expect<Equal<IsUnion<{a: string}|{a: number}>, true >>,\r\n  Expect<Equal<IsUnion<{a: string|number}>, false >>,\r\n  Expect<Equal<IsUnion<[string|number]>, false >>,\r\n  // Cases where T resolves to a non-union type.\r\n  Expect<Equal<IsUnion<string|never>, false >>,\r\n  Expect<Equal<IsUnion<string|unknown>, false >>,\r\n  Expect<Equal<IsUnion<string|any>, false >>,\r\n  Expect<Equal<IsUnion<string|'a'>, false >>,\r\n]\n","content":"type IsUnion<T> = any\n"},"__N_SSG":true}