{"pageProps":{"dir":"847-hard-string-join","id":"847","challenge":"hard","info":{"difficulty":"hard","title":"String Join","author":{"github":"tl-matt-davis","name":"Matt Davis"}},"prefix":"<!--info-header-start--><h1>String Join <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> </h1><blockquote><p>by Matt Davis <a href=\"https://github.com/tl-matt-davis\" target=\"_blank\">@tl-matt-davis</a></p></blockquote><p><a href=\"https://tsch.js.org/847/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nCreate a type-safe string join utility which can be used like so:\r\n\r\n```ts\r\nconst hyphenJoiner = join('-')\r\nconst result = hyphenJoiner('a', 'b', 'c'); // = 'a-b-c'\r\n```\r\n\r\nOr alternatively:\r\n```ts\r\njoin('#')('a', 'b', 'c') // = 'a#b#c'\r\n```\r\n\r\nWhen we pass an empty delimiter (i.e '') to join, we should concat the strings as they are, i.e: \r\n```ts\r\njoin('')('a', 'b', 'c') // = 'abc'\r\n```\r\n\r\nWhen only one item is passed, we should get back the original item (without any delimiter added):\r\n```ts\r\njoin('-')('a') // = 'a'\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/847/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/847/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\n// Edge cases\r\nconst noCharsOutput = join('-')();\r\nconst oneCharOutput = join('-')('a');\r\nconst noDelimiterOutput = join('')('a', 'b', 'c');\r\n\r\n// Regular cases\r\nconst hyphenOutput = join('-')('a', 'b', 'c');\r\nconst hashOutput = join('#')('a', 'b', 'c');\r\nconst twoCharOutput = join('-')('a', 'b');\r\nconst longOutput = join('-')('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h');\r\n\r\ntype cases = [\r\n    Expect<Equal<typeof noCharsOutput, ''>>,\r\n    Expect<Equal<typeof oneCharOutput, 'a'>>,\r\n    Expect<Equal<typeof noDelimiterOutput, 'abc'>>,\r\n    Expect<Equal<typeof twoCharOutput, 'a-b'>>,\r\n    Expect<Equal<typeof hyphenOutput, 'a-b-c'>>,\r\n    Expect<Equal<typeof hashOutput, 'a#b#c'>>,\r\n    Expect<Equal<typeof longOutput, 'a-b-c-d-e-f-g-h'>>,\r\n]\n","content":"declare function join(delimiter: any): (...parts: any[]) => any;\n"},"__N_SSG":true}