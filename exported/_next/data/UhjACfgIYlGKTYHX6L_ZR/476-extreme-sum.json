{"pageProps":{"dir":"476-extreme-sum","id":"476","challenge":"extreme","info":{"difficulty":"extreme","title":"Sum","tags":"math, template-literal","author":{"github":"uid11","name":null}},"prefix":"<!--info-header-start--><h1>Sum <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23math-999\" alt=\"#math\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by null <a href=\"https://github.com/uid11\" target=\"_blank\">@uid11</a></p></blockquote><p><a href=\"https://tsch.js.org/476/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type `Sum<A, B>` that summing two non-negative integers and returns the sum as a string. Numbers can be specified as a string, number, or bigint.\r\n\r\nFor example,\r\n\r\n```ts\r\ntype T0 = Sum<2, 3> // '5'\r\ntype T1 = Sum<'13', '21'> // '34'\r\ntype T2 = Sum<'328', 7> // '335'\r\ntype T3 = Sum<1_000_000_000_000n, '123'> // '1000000000123'\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/476/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/476/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Sum<2, 3>, '5'>>,\r\n  Expect<Equal<Sum<'13', '21'>, '34'>>,\r\n  Expect<Equal<Sum<'328', 7>, '335'>>,\r\n  Expect<Equal<Sum<1_000_000_000_000n, '123'>, '1000000000123'>>,\r\n  Expect<Equal<Sum<9999, 1>, '10000'>>,\r\n  Expect<Equal<Sum<4325234, '39532'>, '4364766'>>,\r\n  Expect<Equal<Sum<728, 0>, '728'>>,\r\n  Expect<Equal<Sum<'0', 213>, '213'>>,\r\n  Expect<Equal<Sum<0, '0'>, '0'>>\r\n]\r\n","content":"type Sum<A extends string | number | bigint, B extends string | number | bigint> = string\n"},"__N_SSG":true}