{"pageProps":{"dir":"697-extreme-tag","id":"697","challenge":"extreme","info":{"difficulty":"extreme","title":"Tag","author":{"github":"uid11","name":null}},"prefix":"<!--info-header-start--><h1>Tag <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> </h1><blockquote><p>by null <a href=\"https://github.com/uid11\" target=\"_blank\">@uid11</a></p></blockquote><p><a href=\"https://tsch.js.org/697/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nDespite the structural typing system in TypeScript, it is sometimes convenient to mark some types with tags, and so that these tags do not interfere with the ability to assign values  of these types to each other.\r\n\r\nFor example, using tags, you can check that some value passes through the calls of the required functions, and in the correct order:\r\n```ts\r\nconst doA = <T extends string>(x: T) => {\r\n  const result = x\r\n\r\n  return result as Tag<typeof result, 'A'>\r\n}\r\n\r\nconst doB = <T extends string>(x: T) => {\r\n  const result = x\r\n\r\n  return result as Tag<typeof result, 'B'>\r\n};\r\n\r\nconst a = doA('foo')\r\nconst b = doB(a)\r\n\r\ntype Check0 = IsTrue<HasTags<typeof b, ['A', 'B']>>\r\n```\r\n\r\nWrite a function `Tag<B, T extends string>` that takes a type `B` other than `null` and `undefined` and returns a type labeled with the string literal type `T`.\r\n\r\nThe labeled types must be mutually assignable with the corresponding original types:\r\n```ts\r\ndeclare let x: string\r\ndeclare let y: Tag<string, 'A'>\r\n\r\nx = y = x\r\n```\r\n\r\nWhen tagging a type already marked with a tag, a new tag must be added to the end of the list of all tags of the type:\r\n```ts\r\ntype T0 = Tag<{ foo: string }, 'A'>\r\ntype T1 = Tag<T0, 'B'>\r\n\r\ntype Check1 = IsTrue<HasExactTags<T1, ['A', 'B']>>\r\n```\r\n\r\nAdd some functions to check for type tags.\r\n\r\n`GetTags<B>` retrieves a list of all tags of a type `B`:\r\n```ts\r\ntype T2 = Tag<number, 'C'>\r\n\r\ntype Check2 = IsTrue<Equal<GetTags<T2>, ['C']>>\r\n```\r\n\r\n`HasTag<B, T extends string>` checks if type `B` is tagged with tag `T` (and returns `true` or `false`):\r\n```ts\r\ntype T3 = Tag<0 | 1, 'D'>\r\n\r\ntype Check3 = IsTrue<HasTag<T3, 'D'>>\r\n```\r\n\r\n`HasTags<B, T extends readonly string[]>` checks if type `B` is tagged in succession with tags from tuple `T`:\r\n```ts\r\ntype T4 = Tag<Tag<Tag<{}, 'A'>, 'B'>, 'C'>\r\n\r\ntype Check4 = IsTrue<HasTags<T4, ['B', 'C']>>\r\n```\r\n\r\n`HasExactTags<B, T extends readonly string[]>` checks if the list of all tags of type `B` is exactly equal to the `T` tuple:\r\n```ts\r\ntype T5 = Tag<Tag<unknown, 'A'>, 'B'>\r\n\r\ntype Check5 = IsTrue<HasExactTags<T5, ['A', 'B']>>\r\n```\r\n\r\nFinally, add type `UnTag<B>`, which removes all tags from type `B`:\r\n```ts\r\ntype T6 = Tag<{ bar: number }, 'A'>\r\ntype T7 = UnTag<T6>\r\n\r\ntype Check6 = IsFalse<HasTag<T7, 'A'>>\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/697/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/697/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { IsTrue, Expect, Equal } from \"@type-challenges/utils\";\r\n\r\n/**\r\n * Tests of assignable of tagged variables.\r\n */\r\ninterface I {\r\n  foo: string;\r\n}\r\n\r\ndeclare let x0: I;\r\ndeclare let x1: Tag<I, \"a\">;\r\ndeclare let x2: Tag<I, \"b\">;\r\ndeclare let x3: Tag<Tag<I, \"a\">, \"b\">;\r\ndeclare let x4: Tag<Tag<I, \"b\">, \"a\">;\r\ndeclare let x5: Tag<Tag<I, \"c\">, \"a\">;\r\ndeclare let x6: Tag<Tag<I, \"c\">, \"b\">;\r\ndeclare let x7: UnTag<Tag<Tag<I, \"c\">, \"b\">>;\r\n\r\nx0 = x1 = x0 = x2 = x0 = x3 = x0 = x4 = x0 = x5 = x0 = x6 = x0 = x7 = x0;\r\nx1 = x2 = x1 = x3 = x1 = x4 = x1 = x5 = x1 = x6 = x1 = x7 = x1;\r\nx2 = x3 = x2 = x4 = x2 = x5 = x2 = x6 = x2 = x6 = x2;\r\nx3 = x4 = x4 = x5 = x3 = x6 = x3 = x7 = x3;\r\nx4 = x5 = x5 = x6 = x4 = x7 = x4;\r\nx5 = x6 = x5 = x7 = x5;\r\nx6 = x7 = x6;\r\n\r\ndeclare let y0: string;\r\ndeclare let y1: Tag<string, \"a\">;\r\ndeclare let y2: Tag<string, \"b\">;\r\ndeclare let y3: Tag<Tag<string, \"a\">, \"b\">;\r\ndeclare let y4: Tag<Tag<string, \"b\">, \"a\">;\r\ndeclare let y5: Tag<Tag<string, \"c\">, \"a\">;\r\ndeclare let y6: Tag<Tag<string, \"c\">, \"b\">;\r\ndeclare let y7: UnTag<Tag<Tag<string, \"c\">, \"b\">>;\r\n\r\ny0 = y1 = y0 = y2 = y0 = y3 = y0 = y4 = y0 = y5 = y0 = y6 = y0 = y7 = y0;\r\ny1 = y2 = y1 = y3 = y1 = y4 = y1 = y5 = y1 = y6 = y1 = y7 = y1;\r\ny2 = y3 = y2 = y4 = y2 = y5 = y2 = y6 = y2 = y7 = y2;\r\ny3 = y4 = y4 = y5 = y3 = y6 = y3 = y7 = y3;\r\ny4 = y5 = y5 = y6 = y4 = y7 = y4;\r\ny5 = y6 = y5 = y7 = y5;\r\ny6 = y7 = y6;\r\n\r\n// @ts-expect-error\r\nx0 = y0;\r\n// @ts-expect-error\r\nx1 = y1;\r\n// @ts-expect-error\r\nx2 = y2;\r\n// @ts-expect-error\r\nx3 = y3;\r\n// @ts-expect-error\r\nx4 = y4;\r\n// @ts-expect-error\r\nx5 = y5;\r\n// @ts-expect-error\r\nx6 = y6;\r\n// @ts-expect-error\r\nx7 = y7;\r\n\r\ndeclare const UNIQUE_SYMBOL: unique symbol;\r\ntype US = typeof UNIQUE_SYMBOL;\r\n\r\n/**\r\n * Tests of API (Tag, GetTags, Untag, HasTag, HasTags, HasExactTags).\r\n */\r\ntype cases = [\r\n  /**\r\n   * Tag.\r\n   */\r\n  IsTrue<Equal<Tag<null, \"foo\">, null>>,\r\n  IsTrue<Equal<Tag<undefined, \"foo\">, undefined>>,\r\n  IsTrue<Equal<\"x\", keyof Tag<{ x: 0 }, \"foo\"> & string>>,\r\n\r\n  /**\r\n   * GetTags.\r\n   */\r\n  IsTrue<Equal<GetTags<null>, []>>,\r\n  IsTrue<Equal<GetTags<any>, []>>,\r\n  IsTrue<Equal<GetTags<undefined>, []>>,\r\n  IsTrue<Equal<GetTags<Tag<any, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<null | 1, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<0, \"foo\"> | 1>, []>>,\r\n  IsTrue<Equal<GetTags<Tag<{}, \"foo\"> | Tag<1, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<string, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<never, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<Tag<string, \"foo\">, \"bar\">>, [\"foo\", \"bar\"]>>,\r\n  IsTrue<\r\n    Equal<\r\n      GetTags<Tag<Tag<Tag<{}, \"foo\">, \"bar\">, \"baz\">>,\r\n      [\"foo\", \"bar\", \"baz\"]\r\n    >\r\n  >,\r\n\r\n  /**\r\n   * UnTag.\r\n   */\r\n  IsTrue<Equal<UnTag<null>, null>>,\r\n  IsTrue<Equal<UnTag<undefined>, undefined>>,\r\n  IsTrue<Equal<UnTag<Tag<{}, \"foo\">>, {}>>,\r\n  IsTrue<Equal<UnTag<Tag<Tag<{ x: 0 }, \"foo\">, \"bar\">>, { x: 0 }>>,\r\n  IsTrue<Equal<keyof UnTag<Tag<Tag<number, \"foo\">, \"bar\">>, keyof number>>,\r\n\r\n  /**\r\n   * HasTag.\r\n   */\r\n  Expect<Equal<HasTag<null, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<undefined, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<any, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<1, \"foo\"> | {}, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<{}, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<0, \"foo\"> | Tag<1, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<0, \"foo\"> | Tag<1, \"bar\">, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<Tag<{}, \"foo\">, \"bar\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<Tag<symbol, \"bar\">, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<Tag<{}, \"bar\">, \"baz\">, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<true, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<null, \"foo\">, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<Tag<undefined, \"foo\">, \"bar\">, \"bar\">, false>>,\r\n  Expect<Equal<HasTag<Tag<Tag<false, \"foo\">, \"bar\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<Tag<never, \"bar\">, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<{}, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<{}, \"foo\">, \"bar\">, false>>,\r\n  Expect<Equal<HasTag<{}, \"foo\">, false>>,\r\n\r\n  /**\r\n   * HasTags.\r\n   */\r\n  Expect<Equal<HasTags<null, [\"foo\"]>, false>>,\r\n  Expect<Equal<HasTags<undefined, [\"foo\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<any, \"bar\">, [\"foo\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<{}, \"bar\">, [\"foo\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<{}, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<any, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<{} | undefined, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<string, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<3n, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<{}, \"bar\">, \"foo\">, [\"foo\", \"bar\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<{}, \"baz\">, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<symbol, \"baz\">, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<{}, \"foo\">, \"bar\">, \"baz\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<0, \"foo\">, \"bar\">, \"baz\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<{}, \"foo\">, \"baz\">, \"bar\">, [\"foo\", \"bar\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<Tag<unknown, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n\r\n  /**\r\n   * HasExactTags.\r\n   */\r\n  Expect<Equal<HasExactTags<0, []>, true>>,\r\n  Expect<Equal<HasExactTags<null, []>, true>>,\r\n  Expect<Equal<HasExactTags<undefined, []>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<number, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<any, \"foo\">, [\"bar\"]>, false>>,\r\n  Expect<Equal<HasExactTags<Tag<Tag<any, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<\"\", \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<US, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<{}, \"foo\">, [\"bar\"]>, false>>,\r\n  Expect<Equal<HasExactTags<Tag<Tag<Tag<{}, \"foo\">, \"bar\">, \"baz\">, [\"foo\", \"bar\"]>, false>>,\r\n  Expect<Equal<HasExactTags<Tag<Tag<Tag<{}, \"foo\">, \"bar\">, \"baz\">, [\"foo\", \"bar\", \"baz\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<Tag<void, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n];\r\n","content":"type GetTags<B> = any\r\n\r\ntype Tag<B, T extends string> = any\r\n\r\ntype UnTag<B> = any\r\n\r\ntype HasTag<B, T extends string> = any\r\ntype HasTags<B, T extends readonly string[]> = any\r\ntype HasExactTags<B, T extends readonly string[]> = any\n"},"__N_SSG":true}