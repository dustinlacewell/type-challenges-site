{"pageProps":{"dir":"869-extreme-distributeunions","id":"869","challenge":"extreme","info":{"difficulty":"extreme","title":"DistributeUnions","author":{"github":"gvergnaud","name":"Gabriel Vergnaud"}},"prefix":"<!--info-header-start--><h1>DistributeUnions <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> </h1><blockquote><p>by Gabriel Vergnaud <a href=\"https://github.com/gvergnaud\" target=\"_blank\">@gvergnaud</a></p></blockquote><p><a href=\"https://tsch.js.org/869/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type `Distribute Unions`, that turns a type of data structure containing union types into a union of\r\nall possible types of permitted data structures that don't contain any union. The data structure can be any\r\ncombination of objects and tuples on any level of nesting.\r\n\r\nFor example:\r\n\r\n```ts\r\ntype T1 = DistributeUnions<[1 | 2, 'a' | 'b']>\r\n// =>   [1, 'a'] | [2, 'a'] | [1, 'b'] | [2, 'b']\r\n\r\ntype T2 = DistributeUnions<{ type: 'a', value: number | string } | { type: 'b', value: boolean }>\r\n//  =>  | { type 'a', value: number }\r\n//      | { type 'a', value: string }\r\n//      | { type 'b', value: boolean }\r\n\r\ntype T3 = DistributeUnions<[{ value: 'a' | 'b' },  { x: { y: 2 | 3  } }] | 17>\r\n//  =>  | [{ value: 'a' },  { x: { y: 2  } }]\r\n//      | [{ value: 'a' },  { x: { y: 3  } }]\r\n//      | [{ value: 'b' },  { x: { y: 2  } }]\r\n//      | [{ value: 'b' },  { x: { y: 3  } }]\r\n//      | 17\r\n```\r\n\r\nFor context, this type can be very useful if you want to exclude a case on deep data structures:\r\n\r\n```ts\r\ntype ExcludeDeep<A, B> = Exclude<DistributeUnions<A>, B>\r\n\r\ntype T0 = ExcludeDeep<[{ value: 'a' | 'b' },  { x: { y: 2 | 3  } }] | 17, [{ value: 'a' },  any]>\r\n//  =>  | [{ value: 'b' },  { x: { y: 2  } }]\r\n//      | [{ value: 'b' },  { x: { y: 3  } }]\r\n//      | 17\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/869/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/869/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    // Already distributed unions should stay the same:\r\n    Expect<Equal<DistributeUnions<1>, 1>>,\r\n    Expect<Equal<DistributeUnions<string>, string>>,\r\n    Expect<Equal<DistributeUnions<1 | 2>, 1 | 2>>,\r\n    Expect<Equal<DistributeUnions<'b' | { type: 'a' } | [1]>, 'b' | { type: 'a' } | [1]>>,\r\n    // tuples:\r\n    Expect<Equal<DistributeUnions<[1 | 2, 3]>, [1, 3] | [2, 3]>>,\r\n    Expect<Equal<DistributeUnions<[1 | 2, 'a' | 'b']>, [1, 'a'] | [1, 'b'] | [2, 'a'] | [2, 'b']>>,\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<[1 | 2, 'a' | 'b', false | true]>,\r\n            | [1, 'a', false]\r\n            | [1, 'a', true]\r\n            | [1, 'b', false]\r\n            | [1, 'b', true]\r\n            | [2, 'a', false]\r\n            | [2, 'a', true]\r\n            | [2, 'b', false]\r\n            | [2, 'b', true]\r\n        >\r\n    >,\r\n    // objects\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<{ x: 'a' | 'b'; y: 'c' | 'd' }>,\r\n            { x: 'a'; y: 'c' } | { x: 'a'; y: 'd' } | { x: 'b'; y: 'c' } | { x: 'b'; y: 'd' }\r\n        >\r\n    >,\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<{ type: 'a'; value: number | string } | { type: 'b'; value: boolean }>,\r\n            | { type: 'a'; value: string }\r\n            | { type: 'a'; value: number }\r\n            | { type: 'b'; value: false }\r\n            | { type: 'b'; value: true }\r\n        >\r\n    >,\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<\r\n                | {\r\n                      type: 'a';\r\n                      option: { kind: 'none' } | { kind: 'some'; value: 'x' | 'y' };\r\n                  }\r\n                | { type: 'b'; msg: string }\r\n            >,\r\n            | { type: 'b'; msg: string }\r\n            | { type: 'a'; option: { kind: 'none' } }\r\n            | { type: 'a'; option: { kind: 'some'; value: 'x' } }\r\n            | { type: 'a'; option: { kind: 'some'; value: 'y' } }\r\n        >\r\n    >,\r\n    // mixed structures:\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<[false | true, { value: 'a' | 'b' }, { x: { y: 2 | 3 } }]>,\r\n            | [false, { value: 'a' }, { x: { y: 2 } }]\r\n            | [false, { value: 'a' }, { x: { y: 3 } }]\r\n            | [false, { value: 'b' }, { x: { y: 2 } }]\r\n            | [false, { value: 'b' }, { x: { y: 3 } }]\r\n            | [true, { value: 'a' }, { x: { y: 2 } }]\r\n            | [true, { value: 'a' }, { x: { y: 3 } }]\r\n            | [true, { value: 'b' }, { x: { y: 2 } }]\r\n            | [true, { value: 'b' }, { x: { y: 3 } }]\r\n        >\r\n    >,\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<17 | [10 | { value: 'a' | 'b' }, { x: { y: 2 | 3 } }]>,\r\n            | 17\r\n            | [10, { x: { y: 2 } }]\r\n            | [10, { x: { y: 3 } }]\r\n            | [{ value: 'a' }, { x: { y: 2 } }]\r\n            | [{ value: 'a' }, { x: { y: 3 } }]\r\n            | [{ value: 'b' }, { x: { y: 2 } }]\r\n            | [{ value: 'b' }, { x: { y: 3 } }]\r\n        >\r\n    >,\r\n];\r\n","content":"type DistributeUnions<T> = any\n"},"__N_SSG":true}