{"pageProps":{"dir":"274-extreme-integers-comparator","id":"274","challenge":"extreme","info":{"difficulty":"extreme","title":"Integers Comparator","tags":"template-literal, math","author":{"github":"g-plane","name":"Pig Fang"}},"prefix":"<!--info-header-start--><h1>Integers Comparator <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/> <img src=\"https://img.shields.io/badge/-%23math-999\" alt=\"#math\"/></h1><blockquote><p>by Pig Fang <a href=\"https://github.com/g-plane\" target=\"_blank\">@g-plane</a></p></blockquote><p><a href=\"https://tsch.js.org/274/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type-level integers comparator. We've provided an enum for indicating the comparison result, like this:\r\n\r\n- If `a` is greater than `b`, type should be `Comparison.Greater`.\r\n- If `a` and `b` are equal, type should be `Comparison.Equal`.\r\n- If `a` is lower than `b`, type should be `Comparison.Lower`.\r\n\r\n**Note that `a` and `b` can be positive integers or negative integers or zero, even one is positive while another one is negative.**\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/274/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/274/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Comparator<5, 5>, Comparison.Equal>>,\r\n  Expect<Equal<Comparator<5, 6>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<5, 8>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<5, 0>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<-5, 0>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<0, 0>, Comparison.Equal>>,\r\n  Expect<Equal<Comparator<0, -5>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<5, -3>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<5, -7>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<-5, -7>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<-5, -3>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<-25, -30>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<15, -23>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<40, 37>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<-36, 36>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<27, 27>, Comparison.Equal>>,\r\n  Expect<Equal<Comparator<-38, -38>, Comparison.Equal>>,\r\n]\n","content":"enum Comparison {\r\n  Greater,\r\n  Equal,\r\n  Lower,\r\n}\r\n\r\ntype Comparator<A extends number, B extends number> = any\n"},"__N_SSG":true}