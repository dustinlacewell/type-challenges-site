{"pageProps":{"dir":"741-extreme-sort","id":"741","challenge":"extreme","info":{"difficulty":"extreme","title":"Sort","tags":"infer, array","author":{"github":"suica","name":"Sg"}},"prefix":"<!--info-header-start--><h1>Sort <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Sg <a href=\"https://github.com/suica\" target=\"_blank\">@suica</a></p></blockquote><p><a href=\"https://tsch.js.org/741/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nIn this challenge, you are required to sort natural number arrays in either ascend order or descent order.\r\n\r\nAscend order examples:\r\n```ts\r\nSort<[]> // []\r\nSort<[1]> // [1]\r\nSort<[2, 4, 7, 6, 6, 6, 5, 8, 9]> //  [2, 4, 5, 6, 6, 6, 7, 8, 9]\r\n```\r\n\r\nThe `Sort` type should also accept a boolean type. When it is `true`, the sorted result should be in descent order. Some examples:\r\n\r\n```ts\r\nSort<[3, 2, 1], true> // [3, 2, 1]\r\nSort<[3, 2, 0, 1, 0, 0, 0], true> // [3, 2, 1, 0, 0, 0, 0]\r\n```\r\n\r\nExtra challenges:\r\n1. Support natural numbers with 15+ digits.\r\n2. Support float numbers.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/741/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/741/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    Expect<Equal<Sort<[]>, []>>,\r\n    Expect<Equal<Sort<[1]>, [1]>>,\r\n    Expect<Equal<Sort<[2, 1]>, [1, 2]>>,\r\n    Expect<Equal<Sort<[0, 0, 0]>, [0, 0, 0]>>,\r\n    Expect<Equal<Sort<[1, 2, 3]>, [1, 2, 3]>>,\r\n    Expect<Equal<Sort<[3, 2, 1]>, [1, 2, 3]>>,\r\n    Expect<Equal<Sort<[3, 2, 1, 2]>, [1, 2, 2, 3]>>,\r\n    Expect<Equal<Sort<[3, 2, 0, 1, 0, 0, 0]>, [0, 0, 0, 0, 1, 2, 3]>>,\r\n    Expect<Equal<Sort<[2, 4, 7, 6, 6, 6, 5, 8, 9]>, [2, 4, 5, 6, 6, 6, 7, 8, 9]>>,\r\n    Expect<Equal<Sort<[1, 1, 2, 1, 1, 1, 1, 1, 1]>, [1, 1, 1, 1, 1, 1, 1, 1, 2]>>,\r\n    Expect<Equal<Sort<[], true>, []>>,\r\n    Expect<Equal<Sort<[1], true>, [1]>>,\r\n    Expect<Equal<Sort<[2, 1], true>, [2, 1]>>,\r\n    Expect<Equal<Sort<[0, 0, 0], true>, [0, 0, 0]>>,\r\n    Expect<Equal<Sort<[1, 2, 3], true>, [3, 2, 1]>>,\r\n    Expect<Equal<Sort<[3, 2, 1], true>, [3, 2, 1]>>,\r\n    Expect<Equal<Sort<[3, 2, 1, 2], true>, [3, 2, 2, 1]>>,\r\n    Expect<Equal<Sort<[3, 2, 0, 1, 0, 0, 0], true>, [3, 2, 1, 0, 0, 0, 0]>>,\r\n    Expect<Equal<Sort<[2, 4, 7, 6, 6, 6, 5, 8, 9], true>, [9, 8, 7, 6, 6, 6, 5, 4, 2]>>\r\n]\n","content":"type Sort = any\n"},"__N_SSG":true}