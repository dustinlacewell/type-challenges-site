{"pageProps":{"dir":"462-extreme-currying-2","id":"462","challenge":"extreme","info":{"difficulty":"extreme","title":"Currying 2","author":{"github":"hubvue","name":"Kim"},"related":17},"prefix":"<!--info-header-start--><h1>Currying 2 <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> </h1><blockquote><p>by Kim <a href=\"https://github.com/hubvue\" target=\"_blank\">@hubvue</a></p></blockquote><p><a href=\"https://tsch.js.org/462/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a> </p><!--info-header-end-->\r\n\r\n[Currying](https://en.wikipedia.org/wiki/Currying) is the technique of converting a function that takes multiple arguments into a sequence of functions that each take a single argument.\r\n\r\nBut in our daily life, currying dynamic arguments is also commonly used, for example, the `Function.bind(this, [...params])` API.\r\n\r\n```ts\r\nconst func = (a: number, b: number, c: number) => {\r\n  return a + b + c\r\n}\r\n\r\nconst bindFunc = func(null, 1, 2)\r\n\r\nconst result = bindFunc(3) // result: 6\r\n```\r\n\r\nThus, based on `Currying 1`, we would need to have the dynamic argument version:\r\n\r\n```ts\r\nconst add = (a: number, b: number, c: number) => a + b + c\r\nconst three = add(1, 1, 1) \r\n\r\nconst curriedAdd = DynamicParamsCurrying(add)\r\nconst six = curriedAdd(1, 2, 3)\r\nconst seven = curriedAdd(1, 2)(4)\r\nconst eight = curriedAdd(2)(3)(4)\r\n```\r\n\r\nIn this challenge, `DynamicParamsCurrying` may take a function with zero to multiple arguments, you need to correctly type it. The returned function may accept at least one argument. When all the arguments as satisfied, it should yield the return type of the original function correctly.\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/462/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/462/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/17-hard-currying-1/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-17%E3%83%BBCurrying%201-de3d37\" alt=\"17・Currying 1\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\nconst curried1 = DynamicParamsCurrying((a: string, b: number, c: boolean) => true)\r\nconst curried2 = DynamicParamsCurrying((a: string, b: number, c: boolean, d: boolean, e: boolean, f: string, g: boolean) => true)\r\n\r\nconst curried1Return1 = curried1('123')(123)(true)\r\nconst curried1Return2 = curried1('123', 123)(false)\r\nconst curried1Return3 = curried1('123', 123, true)\r\n\r\nconst curried2Return1 = curried2('123')(123)(true)(false)(true)('123')(false)\r\nconst curried2Return2 = curried2('123', 123)(true, false)(true, '123')(false)\r\nconst curried2Return3 = curried2('123', 123)(true)(false)(true, '123', false)\r\nconst curried2Return4 = curried2('123', 123, true)(false, true, '123')(false)\r\nconst curried2Return5 = curried2('123', 123, true)(false)(true)('123')(false)\r\nconst curried2Return6 = curried2('123', 123, true, false)(true, '123', false)\r\nconst curried2Return7 = curried2('123', 123, true, false, true)('123', false)\r\nconst curried2Return8 = curried2('123', 123, true, false, true)('123')(false)\r\nconst curried2Return9 = curried2('123', 123, true, false, true, '123')(false)\r\nconst curried2Return10 = curried2('123', 123, true, false, true, '123', false)\r\n\r\ntype cases = [\r\n  Expect<Equal< typeof curried1Return1, boolean>>,\r\n  Expect<Equal< typeof curried1Return2, boolean>>,\r\n  Expect<Equal< typeof curried1Return3, boolean>>,\r\n\r\n  Expect<Equal< typeof curried2Return1, boolean>>,\r\n  Expect<Equal< typeof curried2Return2, boolean>>,\r\n  Expect<Equal< typeof curried2Return3, boolean>>,\r\n  Expect<Equal< typeof curried2Return4, boolean>>,\r\n  Expect<Equal< typeof curried2Return5, boolean>>,\r\n  Expect<Equal< typeof curried2Return6, boolean>>,\r\n  Expect<Equal< typeof curried2Return7, boolean>>,\r\n  Expect<Equal< typeof curried2Return8, boolean>>,\r\n  Expect<Equal< typeof curried2Return9, boolean>>,\r\n  Expect<Equal< typeof curried2Return10, boolean>>,\r\n]\r\n","content":"declare function DynamicParamsCurrying(fn: any): any\n"},"__N_SSG":true}