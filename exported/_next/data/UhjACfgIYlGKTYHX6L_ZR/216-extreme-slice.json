{"pageProps":{"dir":"216-extreme-slice","id":"216","challenge":"extreme","info":{"difficulty":"extreme","title":"Slice","tags":"array","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Slice <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/216/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement the JavaScript `Array.slice` function in the type system. `Slice<Arr, Start, End>` takes the tree argument. The output should be a subarray of `Arr` from index `Start` to `End`. Indexes with negative numbers should be counted from reversely.\r\n\r\nFor example\r\n\r\n```ts\r\ntype Arr = [1, 2, 3, 4, 5]\r\ntype Result = Slice<Arr, 2, 4> // expected to be [3, 4]\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/216/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/216/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype Arr = [1, 2, 3, 4, 5]\r\n\r\ntype cases = [\r\n  // basic\r\n  Expect<Equal<Slice<Arr, 0, 1>, [1]>>,\r\n  Expect<Equal<Slice<Arr, 0, 0>, []>>,\r\n  Expect<Equal<Slice<Arr, 2, 4>, [3, 4]>>,\r\n\r\n  // optional args\r\n  Expect<Equal<Slice<[]>, []>>,\r\n  Expect<Equal<Slice<Arr>, Arr>>,\r\n  Expect<Equal<Slice<Arr, 0>, Arr>>,\r\n  Expect<Equal<Slice<Arr, 2>, [3, 4, 5]>>,\r\n\r\n  // negative index\r\n  Expect<Equal<Slice<Arr, 0, -1>, [1,2,3,4]>>,\r\n  Expect<Equal<Slice<Arr, -3, -1>, [3,4]>>,\r\n\r\n  // invalid\r\n  Expect<Equal<Slice<Arr, 10>, []>>,\r\n  Expect<Equal<Slice<Arr, 1, 0>, []>>,\r\n  Expect<Equal<Slice<Arr, 10, 20>, []>>,\r\n]\r\n","content":"type Slice<Arr, Start, End> = any\n"},"__N_SSG":true}