{"pageProps":{"questions":[{"dir":"10-medium-tuple-to-union","id":"10","challenge":"medium","info":{"title":"Tuple to Union","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"infer, tuple, union"},"prefix":"<!--info-header-start--><h1>Tuple to Union <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/> <img src=\"https://img.shields.io/badge/-%23tuple-999\" alt=\"#tuple\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/10/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement a generic `TupleToUnion<T>` which covers the values of a tuple to its values union.\n\nFor example\n\n```ts\ntype Arr = ['1', '2', '3']\n\nconst a: TupleToUnion<Arr> // expected to be '1' | '2' | '3'\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/10/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/10/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<TupleToUnion<[123, '456', true]>, 123 | '456' | true>>,\n  Expect<Equal<TupleToUnion<[123]>, 123>>,\n]\n","content":"type TupleToUnion<T> = any\n"},{"dir":"1042-medium-isnever","id":"1042","challenge":"medium","info":{"difficulty":"medium","title":"IsNever","tags":"union, utils","author":{"github":"hiroyaiizuka","name":"hiroya iizuka"}},"prefix":"<!--info-header-start--><h1>IsNever <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/></h1><blockquote><p>by hiroya iizuka <a href=\"https://github.com/hiroyaiizuka\" target=\"_blank\">@hiroyaiizuka</a></p></blockquote><p><a href=\"https://tsch.js.org/1042/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\r\n\r\nImplement a type IsNever, which takes input type `T`.\r\nIf the type of resolves to `never`, return `true`, otherwise `false`.\r\n\r\nFor example:\r\n\r\n```ts\r\ntype A = IsNever<never>  // expected to be true\r\ntype B = IsNever<undefined> // expected to be false\r\ntype C = IsNever<null> // expected to be false\r\ntype D = IsNever<[]> // expected to be false\r\ntype E = IsNever<number> // expected to be false\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1042/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1042/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<IsNever<never>, true>>,\r\n  Expect<Equal<IsNever<never | string>, false>>,\r\n  Expect<Equal<IsNever<\"\">, false>>,\r\n  Expect<Equal<IsNever<undefined>, false>>,\r\n  Expect<Equal<IsNever<null>, false>>,\r\n  Expect<Equal<IsNever<[]>, false>>,\r\n  Expect<Equal<IsNever<{}>, false>>,\r\n]\r\n","content":"type IsNever = any\n"},{"dir":"106-medium-trimleft","id":"106","challenge":"medium","info":{"difficulty":"medium","title":"Trim Left","tags":"template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Trim Left <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/106/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement `TrimLeft<T>` which takes an exact string type and returns a new string with the whitespace beginning removed.\r\n\r\nFor example\r\n\r\n```ts\r\ntype trimed = TrimLeft<'  Hello World  '> // expected to be 'Hello World  '\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/106/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/106/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<TrimLeft<'str'>, 'str'>>,\r\n  Expect<Equal<TrimLeft<' str'>, 'str'>>,\r\n  Expect<Equal<TrimLeft<'     str'>, 'str'>>,\r\n  Expect<Equal<TrimLeft<'     str     '>, 'str     '>>,\r\n  Expect<Equal<TrimLeft<'   \\n\\t foo bar '>, 'foo bar '>>,\r\n]\n","content":"type TrimLeft<S extends string> = any\n"},{"dir":"108-medium-trim","id":"108","challenge":"medium","info":{"difficulty":"medium","title":"Trim","tags":"template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Trim <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/108/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement `Trim<T>` which takes an exact string type and returns a new string with the whitespace from both ends removed.\r\n\r\nFor example\r\n\r\n```ts\r\ntype trimed = Trim<'  Hello World  '> // expected to be 'Hello World'\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/108/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/108/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Trim<'str'>, 'str'>>,\r\n  Expect<Equal<Trim<' str'>, 'str'>>,\r\n  Expect<Equal<Trim<'     str'>, 'str'>>,\r\n  Expect<Equal<Trim<'str   '>, 'str'>>,\r\n  Expect<Equal<Trim<'     str     '>, 'str'>>,\r\n  Expect<Equal<Trim<'   \\n\\t foo bar \\t'>, 'foo bar'>>,\r\n]\n","content":"type Trim<S extends string> = any\n"},{"dir":"1097-medium-isunion","id":"1097","challenge":"medium","info":{"difficulty":"medium","title":"IsUnion","author":{"github":"bencor","name":null}},"prefix":"<!--info-header-start--><h1>IsUnion <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> </h1><blockquote><p>by null <a href=\"https://github.com/bencor\" target=\"_blank\">@bencor</a></p></blockquote><p><a href=\"https://tsch.js.org/1097/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type `IsUnion`, which takes an input type `T` and returns whether `T` resolves to a union type.\r\n\r\nFor example:\r\n  \r\n  ```ts\r\n  type case1 = IsUnion<string>  // false\r\n  type case2 = IsUnion<string|number>  // true\r\n  type case3 = IsUnion<[string|number]>  // false\r\n  ```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1097/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1097/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<IsUnion<string>, false >>,\r\n  Expect<Equal<IsUnion<string|number>, true >>,\r\n  Expect<Equal<IsUnion<'a'|'b'|'c'|'d'>, true >>,\r\n  Expect<Equal<IsUnion<undefined|null|void|''>, true >>,\r\n  Expect<Equal<IsUnion<{a: string}|{a: number}>, true >>,\r\n  Expect<Equal<IsUnion<{a: string|number}>, false >>,\r\n  Expect<Equal<IsUnion<[string|number]>, false >>,\r\n  // Cases where T resolves to a non-union type.\r\n  Expect<Equal<IsUnion<string|never>, false >>,\r\n  Expect<Equal<IsUnion<string|unknown>, false >>,\r\n  Expect<Equal<IsUnion<string|any>, false >>,\r\n  Expect<Equal<IsUnion<string|'a'>, false >>,\r\n]\n","content":"type IsUnion<T> = any\n"},{"dir":"11-easy-tuple-to-object","id":"11","challenge":"easy","info":{"title":"Tuple to Object","author":{"name":"sinoon","email":"sinoon1218@gamil.com","github":"sinoon"},"tags":null},"prefix":"<!--info-header-start--><h1>Tuple to Object <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> </h1><blockquote><p>by sinoon <a href=\"https://github.com/sinoon\" target=\"_blank\">@sinoon</a></p></blockquote><p><a href=\"https://tsch.js.org/11/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nGiven an array, transform to a object type and the key/value must in the given array.\n\nFor example\n\n```ts\nconst tuple = ['tesla', 'model 3', 'model X', 'model Y'] as const\n\nconst result: TupleToObject<typeof tuple> // expected { tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'}\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/11/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/11/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\nconst tuple = ['tesla', 'model 3', 'model X', 'model Y'] as const\n\ntype cases = [\n  Expect<Equal<TupleToObject<typeof tuple>, { tesla: 'tesla'; 'model 3': 'model 3'; 'model X': 'model X'; 'model Y': 'model Y'}>>,\n]\n","content":"type TupleToObject<T extends readonly any[]> = any\n"},{"dir":"110-medium-capitalize","id":"110","challenge":"medium","info":{"difficulty":"medium","title":"Capitalize","tags":"template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Capitalize <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/110/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement `Capitalize<T>` which converts the first letter of a string to uppercase and leave the rest as-is.\r\n\r\nFor example\r\n\r\n```ts\r\ntype capitalized = Capitalize<'hello world'> // expected to be 'Hello world'\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/110/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/110/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Capitalize<'foobar'>, 'Foobar'>>,\r\n  Expect<Equal<Capitalize<'FOOBAR'>, 'FOOBAR'>>,\r\n  Expect<Equal<Capitalize<'foo bar'>, 'Foo bar'>>,\r\n  Expect<Equal<Capitalize<''>, ''>>,\r\n]\n","content":"type Capitalize<S extends string> = any\n"},{"dir":"112-hard-capitalizewords","id":"112","challenge":"hard","info":{"difficulty":"hard","title":"Capitalize Words","tags":"template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Capitalize Words <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/112/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement `CapitalizeWords<T>` which converts the first letter of **each word of a string** to uppercase and leaves the rest as-is.\r\n\r\nFor example\r\n\r\n```ts\r\ntype capitalized = CapitalizeWords<'hello world, my friends'> // expected to be 'Hello World, My Friends'\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/112/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/112/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<CapitalizeWords<'foobar'>, 'Foobar'>>,\r\n  Expect<Equal<CapitalizeWords<'FOOBAR'>, 'FOOBAR'>>,\r\n  Expect<Equal<CapitalizeWords<'foo bar'>, 'Foo Bar'>>,\r\n  Expect<Equal<CapitalizeWords<'foo bar hello world'>, 'Foo Bar Hello World'>>,\r\n  Expect<Equal<CapitalizeWords<'foo bar.hello,world'>, 'Foo Bar.Hello,World'>>,\r\n  Expect<Equal<CapitalizeWords<''>, ''>>,\r\n]\n","content":"type CapitalizeWords<S extends string> = any\n"},{"dir":"1130-medium-replacekeys","id":"1130","challenge":"medium","info":{"difficulty":"medium","title":"ReplaceKeys","author":{"github":"lullabyjune","name":"贱贱"}},"prefix":"<!--info-header-start--><h1>ReplaceKeys <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> </h1><blockquote><p>by 贱贱 <a href=\"https://github.com/lullabyjune\" target=\"_blank\">@lullabyjune</a></p></blockquote><p><a href=\"https://tsch.js.org/1130/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type ReplaceKeys, that replace keys in union types, if some type has not this key, just skip replacing,\r\nA type takes three arguments. \r\n\r\n\r\nFor example:\r\n\r\n```ts\r\ntype NodeA = {\r\n  type: 'A'\r\n  name: string\r\n  flag: number\r\n}\r\n\r\ntype NodeB = {\r\n  type: 'B'\r\n  id: number\r\n  flag: number\r\n}\r\n\r\ntype NodeC = {\r\n  type: 'C'\r\n  name: string\r\n  flag: number\r\n}\r\n\r\n\r\ntype Nodes = NodeA | NodeB | NodeC\r\n\r\ntype ReplacedNodes = ReplaceKeys<Nodes, 'name' | 'flag', {name: number, flag: string}> // {type: 'A', name: number, flag: string} | {type: 'B', id: number, flag: string} | {type: 'C', name: number, flag: string} // would replace name from string to number, replace flag from number to string.\r\n\r\ntype ReplacedNotExistKeys = ReplaceKeys<Nodes, 'name', {aa: number}> // {type: 'A', name: never} | NodeB | {type: 'C', name: never} // would replace name to never\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1130/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1130/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype NodeA = {\r\n  type: 'A'\r\n  name: string\r\n  flag: number\r\n}\r\n\r\ntype NodeB = {\r\n  type: 'B'\r\n  id: number\r\n  flag: number\r\n}\r\n\r\ntype NodeC = {\r\n  type: 'C'\r\n  name: string\r\n  flag: number\r\n}\r\n\r\ntype ReplacedNodeA = {\r\n  type: 'A'\r\n  name: number\r\n  flag: string\r\n}\r\n\r\ntype ReplacedNodeB = {\r\n  type: 'B'\r\n  id: number\r\n  flag: string\r\n}\r\n\r\ntype ReplacedNodeC = {\r\n  type: 'C'\r\n  name: number\r\n  flag: string\r\n}\r\n\r\ntype NoNameNodeA = {\r\n  type: 'A'\r\n  flag: number\r\n  name: never\r\n}\r\n\r\ntype NoNameNodeC = {\r\n  type: 'C'\r\n  flag: number\r\n  name: never\r\n}\r\n\r\ntype Nodes = NodeA | NodeB | NodeC\r\ntype ReplacedNodes = ReplacedNodeA | ReplacedNodeB | ReplacedNodeC\r\ntype NodesNoName = NoNameNodeA | NoNameNodeC | NodeB\r\n\r\ntype cases = [\r\n  Expect<Equal<ReplaceKeys<Nodes, 'name' | 'flag', {name: number; flag: string}>, ReplacedNodes>>,\r\n  Expect<Equal<ReplaceKeys<Nodes, 'name', {aa: number}>, NodesNoName>>,\r\n]\n","content":"type ReplaceKeys<U, T, Y> = any\n"},{"dir":"114-hard-camelcase","id":"114","challenge":"hard","info":{"difficulty":"hard","title":"CamelCase","tags":"template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>CamelCase <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/114/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement `CamelCase<T>` which converts `snake_case` string to `camelCase`.\r\n\r\nFor example\r\n\r\n```ts\r\ntype camelCase1 = CamelCase<'hello_world_with_types'> // expected to be 'helloWorldWithTypes'\r\ntype camelCase2 = CamelCase<'HELLO_WORLD_WITH_TYPES'> // expected to be same as previous one\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/114/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/114/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<CamelCase<'foobar'>, 'foobar'>>,\r\n  Expect<Equal<CamelCase<'FOOBAR'>, 'foobar'>>,\r\n  Expect<Equal<CamelCase<'foo_bar'>, 'fooBar'>>,\r\n  Expect<Equal<CamelCase<'foo_bar_hello_world'>, 'fooBarHelloWorld'>>,\r\n  Expect<Equal<CamelCase<'HELLO_WORLD_WITH_TYPES'>, 'helloWorldWithTypes'>>,\r\n  Expect<Equal<CamelCase<''>, ''>>,\r\n]\n","content":"type CamelCase<S extends string> = any\n"},{"dir":"116-medium-replace","id":"116","challenge":"medium","info":{"difficulty":"medium","title":"Replace","tags":"template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Replace <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/116/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement `Replace<S, From, To>` which replace the string `From` with `To` once in the given string `S`\r\n\r\nFor example\r\n\r\n```ts\r\ntype replaced = Replace<'types are fun!', 'fun', 'awesome'> // expected to be 'types are awesome!'\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/116/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/116/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Replace<'foobar', 'bar', 'foo'>, 'foofoo'>>,\r\n  Expect<Equal<Replace<'foobarbar', 'bar', 'foo'>, 'foofoobar'>>,\r\n  Expect<Equal<Replace<'foobarbar', '', 'foo'>, 'foobarbar'>>,\r\n  Expect<Equal<Replace<'', '', ''>, ''>>,\r\n]\n","content":"type Replace<S extends string, From extends string, To extends string> = any\n"},{"dir":"119-medium-replaceall","id":"119","challenge":"medium","info":{"difficulty":"medium","title":"ReplaceAll","tags":"template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>ReplaceAll <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/119/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement `ReplaceAll<S, From, To>` which replace the all the substring `From` with `To` in the given string `S`\r\n\r\nFor example\r\n\r\n```ts\r\ntype replaced = ReplaceAll<'t y p e s', ' ', ''> // expected to be 'types'\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/119/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/119/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<ReplaceAll<'foobar', 'bar', 'foo'>, 'foofoo'>>,\r\n  Expect<Equal<ReplaceAll<'foobarbar', 'bar', 'foo'>, 'foofoofoo'>>,\r\n  Expect<Equal<ReplaceAll<'t y p e s', ' ', ''>, 'types'>>,\r\n  Expect<Equal<ReplaceAll<'foobarbar', '', 'foo'>, 'foobarbar'>>,\r\n  Expect<Equal<ReplaceAll<'barfoo', 'bar', 'foo'>, 'foofoo'>>,\r\n  Expect<Equal<ReplaceAll<'foobarfoobar', 'ob', 'b'>, 'fobarfobar'>>,\r\n  Expect<Equal<ReplaceAll<'', '', ''>, ''>>,\r\n]\r\n","content":"type ReplaceAll<S extends string, From extends string, To extends string> = any\n"},{"dir":"12-medium-chainable-options","id":"12","challenge":"medium","info":{"title":"Chainable Options","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"application"},"prefix":"<!--info-header-start--><h1>Chainable Options <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23application-999\" alt=\"#application\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/12/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nChainable options are commonly used in Javascript. But when we switch to TypeScript, can you properly type it?\n\nIn this challenge, you need to type an object or a class - whatever you like - to provide two function `option(key, value)` and `get()`. In `option`, you can extend the current config type by the given key and value. We should about to access the final result via `get`.\n\nFor example\n\n```ts\ndeclare const config: Chainable\n\nconst result = config\n  .option('foo', 123)\n  .option('name', 'type-challenges')\n  .option('bar', { value: 'Hello World' })\n  .get()\n\n// expect the type of result to be:\ninterface Result {\n  foo: number\n  name: string\n  bar: {\n    value: string\n  }\n}\n```\n\nYou don't need to write any js/ts logic to handle the problem - just in type level. \n\nYou can assume that `key` only accepts `string` and the `value` can be anything - just leave it as-is. Same `key` won't be passed twice.\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/12/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/12/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\n","suffix":"import { Alike, Expect } from '@type-challenges/utils'\n\ndeclare const a: Chainable\n\nconst result = a\n  .option('foo', 123)\n  .option('bar', { value: 'Hello World' })\n  .option('name', 'type-challenges')\n  .get()\n\ntype cases = [\n  Expect<Alike<typeof result, Expected>>\n]\n\ntype Expected = {\n  foo: number\n  bar: {\n    value: string\n  }\n  name: string\n}\n","content":"type Chainable = {\n  option(key: string, value: any): any\n  get(): any\n}\n"},{"dir":"1290-hard-pinia","id":"1290","challenge":"hard","info":{"difficulty":"hard","title":"Pinia","tags":"this, vue","author":{"github":"g-plane","name":"Pig Fang"}},"prefix":"<!--info-header-start--><h1>Pinia <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23this-999\" alt=\"#this\"/> <img src=\"https://img.shields.io/badge/-%23vue-999\" alt=\"#vue\"/></h1><blockquote><p>by Pig Fang <a href=\"https://github.com/g-plane\" target=\"_blank\">@g-plane</a></p></blockquote><p><a href=\"https://tsch.js.org/1290/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nCreate a type-level function whose types is similar to [Pinia](https://github.com/posva/pinia) library. You don't need to implement function actually, just adding types.\r\n\r\n### Overview\r\n\r\nThis function receive only one parameter whose type is an object. The object contains 4 properties:\r\n\r\n- `id` - just a string (required)\r\n- `state` - a function which will return an object as store's state (required)\r\n- `getters` - an object with methods which is similar to Vue's computed values or Vuex's getters, and details are below (optional)\r\n- `actions` - an object with methods which can do side effects and mutate state, and details are below (optional)\r\n\r\n### Getters\r\n\r\nWhen you define a store like this:\r\n\r\n```typescript\r\nconst store = defineStore({\r\n  // ...other required fields\r\n  getters: {\r\n    getSomething() {\r\n      return 'xxx'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nAnd you should use it like this:\r\n\r\n```typescript\r\nstore.getSomething\r\n```\r\n\r\ninstead of:\r\n\r\n```typescript\r\nstore.getSomething()  // error\r\n```\r\n\r\nAdditionally, getters can access state and/or other getters via `this`, but state is read-only.\r\n\r\n### Actions\r\n\r\nWhen you define a store like this:\r\n\r\n```typescript\r\nconst store = defineStore({\r\n  // ...other required fields\r\n  actions: {\r\n    doSideEffect() {\r\n      this.xxx = 'xxx'\r\n      return 'ok'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nUsing it is just to call it:\r\n\r\n```typescript\r\nconst returnValue = store.doSideEffect()\r\n```\r\n\r\nActions can return any value or return nothing, and it can receive any number of parameters with different types.\r\nParameters types and return type can't be lost, which means type-checking must be available at call side.\r\n\r\nState can be accessed and mutated via `this`. Getters can be accessed via `this` but they're read-only.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1290/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1290/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\nconst store = defineStore({\r\n  id: '',\r\n  state: () => ({\r\n    num: 0,\r\n    str: '',\r\n  }),\r\n  getters: {\r\n    stringifiedNum() {\r\n      // @ts-expect-error\r\n      this.num += 1\r\n\r\n      return this.num.toString()\r\n    },\r\n    parsedNum() {\r\n      return parseInt(this.stringifiedNum)\r\n    },\r\n  },\r\n  actions: {\r\n    init() {\r\n      this.reset()\r\n      this.increment()\r\n    },\r\n    increment(step = 1) {\r\n      this.num += step\r\n    },\r\n    reset() {\r\n      this.num = 0\r\n\r\n      // @ts-expect-error\r\n      this.parsedNum = 0\r\n\r\n      return true\r\n    },\r\n    setNum(value: number) {\r\n      this.num = value\r\n    },\r\n  },\r\n})\r\n\r\n// @ts-expect-error\r\nstore.nopeStateProp\r\n// @ts-expect-error\r\nstore.nopeGetter\r\n// @ts-expect-error\r\nstore.stringifiedNum()\r\nstore.init()\r\n// @ts-expect-error\r\nstore.init(0)\r\nstore.increment()\r\nstore.increment(2)\r\n// @ts-expect-error\r\nstore.setNum()\r\n// @ts-expect-error\r\nstore.setNum('3')\r\nstore.setNum(3)\r\nconst r = store.reset()\r\n\r\ntype _tests = [\r\n  Expect<Equal<typeof store.num, number>>,\r\n  Expect<Equal<typeof store.str, string>>,\r\n  Expect<Equal<typeof store.stringifiedNum, string>>,\r\n  Expect<Equal<typeof store.parsedNum, number>>,\r\n  Expect<Equal<typeof r, true>>\r\n]\n","content":"declare function defineStore(store: unknown): unknown\n"},{"dir":"13-warm-hello-world","id":"13","challenge":"warm","info":{"title":"Hello World","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"}},"prefix":"<!--info-header-start--><h1>Hello World <img src=\"https://img.shields.io/badge/-warm--up-teal\" alt=\"warm-up\"/> </h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/13/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nHello, World!\n\nIn Type Challenges, we use the type system itself to do the assertion. \n\nFor this challenge, you will need to change the following code to make the tests pass (no type check errors).\n\n```ts\n// expected to be string\ntype HelloWorld = any\n```\n\n```ts\n// you should make this work\ntype test = Expect<Equal<HelloWorld, string>>\n```\n\nClick the `Take the Challenge` button to start coding! Happy Hacking!\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/13/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/13/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\n","suffix":"import { Equal, Expect, NotAny } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<NotAny<HelloWorld>>,\n  Expect<Equal<HelloWorld, string>>\n]\n","content":"type HelloWorld = any // expected to be a string\n"},{"dir":"1367-medium-remove-index-signature","id":"1367","challenge":"medium","info":{"difficulty":"medium","title":"Remove Index Signature","author":{"github":"hiroyaiizuka","name":"hiroya iizuka"}},"prefix":"<!--info-header-start--><h1>Remove Index Signature <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> </h1><blockquote><p>by hiroya iizuka <a href=\"https://github.com/hiroyaiizuka\" target=\"_blank\">@hiroyaiizuka</a></p></blockquote><p><a href=\"https://tsch.js.org/1367/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement `RemoveIndexSignature<T>` , exclude the index signature from object types.\r\n\r\nFor example:\r\n\r\n```\r\n\r\ntype Foo = {\r\n  [key: string]: any;\r\n  foo(): void;\r\n}\r\n\r\ntype A = RemoveIndexSignature<Foo>  // expected { foo(): void }\r\n\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1367/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1367/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\n\r\ntype Foo = {\r\n  [key: string]: any;\r\n  foo(): void;\r\n}\r\n\r\n\r\ntype Bar = {\r\n  [key: number]: any;\r\n  bar(): void;\r\n}\r\n\r\ntype Baz = {\r\n  bar(): void;\r\n  baz: string\r\n}\r\n\r\n\r\ntype cases = [\r\n  Expect<Equal< RemoveIndexSignature<Foo>, { foo(): void }>>,\r\n  Expect<Equal< RemoveIndexSignature<Bar>, { bar(): void }>>,\r\n  Expect<Equal< RemoveIndexSignature<Baz>, { bar(): void, baz: string }>>\r\n]\n","content":"type RemoveIndexSignature<T> = any\n"},{"dir":"1383-hard-camelize","id":"1383","challenge":"hard","info":{"difficulty":"hard","title":"Camelize","tags":"union, recursion","author":{"github":"denchiklut","name":"Denis"}},"prefix":"<!--info-header-start--><h1>Camelize <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/> <img src=\"https://img.shields.io/badge/-%23recursion-999\" alt=\"#recursion\"/></h1><blockquote><p>by Denis <a href=\"https://github.com/denchiklut\" target=\"_blank\">@denchiklut</a></p></blockquote><p><a href=\"https://tsch.js.org/1383/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement Camelize which converts object from snake_case to to camelCase\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1383/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1383/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"Camelize<{\r\n  some_prop: string, \r\n  prop: { another_prop: string },\r\n  array: [{ snake_case: string }]\r\n}> \r\n\r\n// expected to be\r\n// {\r\n//   someProp: string, \r\n//   prop: { anotherProp: string },\r\n//   array: [{ snakeCase: string }]\r\n// }\n","content":"Camelize<{\r\n  some_prop: string, \r\n  prop: { another_prop: string },\r\n  array: [{ snake_case: string }]\r\n}>\n"},{"dir":"14-easy-first","id":"14","challenge":"easy","info":{"title":"First of Array","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"array","related":15},"prefix":"<!--info-header-start--><h1>First of Array <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/14/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\n\nImplement a generic `First<T>` that takes an Array `T` and returns it's first element's type.\n\nFor example\n\n```ts\ntype arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype head1 = First<arr1> // expected to be 'a'\ntype head2 = First<arr2> // expected to be 3\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/14/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/14/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/15-medium-last/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-15%E3%83%BBLast%20of%20Array-d9901a\" alt=\"15・Last of Array\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<First<[3, 2, 1]>, 3>>,\n  Expect<Equal<First<[() => 123, { a: string }]>, () => 123>>,\n  Expect<Equal<First<[]>, never>>,\n  Expect<Equal<First<[undefined]>, undefined>>\n]\n","content":"type First<T extends any[]> = any\n"},{"dir":"147-hard-c-printf-parser","id":"147","challenge":"hard","info":{"difficulty":"hard","title":"C-printf Parser","tags":"template-literal","author":{"github":"g-plane","name":"Pig Fang"}},"prefix":"<!--info-header-start--><h1>C-printf Parser <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Pig Fang <a href=\"https://github.com/g-plane\" target=\"_blank\">@g-plane</a></p></blockquote><p><a href=\"https://tsch.js.org/147/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nThere is a function in C language: `printf`. This function allows us to print something with formatting. Like this:\r\n\r\n```c\r\nprintf(\"The result is %d.\", 42);\r\n```\r\n\r\nThis challenge requires you to parse the input string and extract the format placeholders like `%d` and `%f`. For example, if the input string is `\"The result is %d.\"`, the parsed result is a tuple `['dec']`.\r\n\r\nHere is the mapping:\r\n\r\n```typescript\r\ntype ControlsMap = {\r\n  c: 'char',\r\n  s: 'string',\r\n  d: 'dec',\r\n  o: 'oct',\r\n  h: 'hex',\r\n  f: 'float',\r\n  p: 'pointer',\r\n}\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/147/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/147/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<ParsePrintFormat<''>, []>>,\r\n  Expect<Equal<ParsePrintFormat<'Any string.'>, []>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %d.'>, ['dec']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %%d.'>, []>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %%%d.'>, ['dec']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %f.'>, ['float']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %h.'>, ['hex']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %q.'>, []>>,\r\n  Expect<Equal<ParsePrintFormat<'Hello %s: score is %d.'>, ['string', 'dec']>>,\r\n  Expect<Equal<ParsePrintFormat<'The result is %'>, []>>\r\n]\n","content":"type ControlsMap = {\r\n  c: 'char',\r\n  s: 'string',\r\n  d: 'dec',\r\n  o: 'oct',\r\n  h: 'hex',\r\n  f: 'float',\r\n  p: 'pointer',\r\n}\r\n\r\ntype ParsePrintFormat = any\n"},{"dir":"15-medium-last","id":"15","challenge":"medium","info":{"title":"Last of Array","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"array","related":"14, 16"},"prefix":"<!--info-header-start--><h1>Last of Array <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/15/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\n> TypeScript 4.0 is recommended in this challenge\n\nImplement a generic `Last<T>` that takes an Array `T` and returns it's last element's type.\n\nFor example\n\n```ts\ntype arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype tail1 = Last<arr1> // expected to be 'c'\ntype tail2 = Last<arr2> // expected to be 1\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/15/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/15/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/14-easy-first/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-14%E3%83%BBFirst%20of%20Array-7aad0c\" alt=\"14・First of Array\"/></a>  <a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/16-medium-pop/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-16%E3%83%BBPop-d9901a\" alt=\"16・Pop\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Last<[3, 2, 1]>, 1>>,\n  Expect<Equal<Last<[() => 123, { a: string }]>, { a: string }>>,\n]\n","content":"type Last<T extends any[]> = any\n"},{"dir":"151-extreme-query-string-parser","id":"151","challenge":"extreme","info":{"difficulty":"extreme","title":"Query String Parser","tags":"template-literal","author":{"github":"g-plane","name":"Pig Fang"}},"prefix":"<!--info-header-start--><h1>Query String Parser <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Pig Fang <a href=\"https://github.com/g-plane\" target=\"_blank\">@g-plane</a></p></blockquote><p><a href=\"https://tsch.js.org/151/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nYou're required to implement a type-level parser to parse URL query string into a object literal type.\r\n\r\nSome detailed requirements:\r\n\r\n- Value of a key in query string can be ignored but still be parsed to `true`. For example, `'key'` is without value, so the parser result is `{ key: true }`.\r\n- Duplicated keys must be merged into one. If there are different values with the same key, values must be merged into a tuple type.\r\n- When a key has only one value, that value can't be wrapped into a tuple type.\r\n- If values with the same key appear more than once, it must be treated as once. For example, `key=value&key=value` must be treated as `key=value` only.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/151/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/151/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<ParseQueryString<''>, {}>>,\r\n  Expect<Equal<ParseQueryString<'k1'>, { k1: true }>>,\r\n  Expect<Equal<ParseQueryString<'k1&k1'>, { k1: true }>>,\r\n  Expect<Equal<ParseQueryString<'k1&k2'>, { k1: true, k2: true }>>,\r\n  Expect<Equal<ParseQueryString<'k1=v1'>, { k1: 'v1' }>>,\r\n  Expect<Equal<ParseQueryString<'k1=v1&k1=v2'>, { k1: ['v1', 'v2'] }>>,\r\n  Expect<Equal<ParseQueryString<'k1=v1&k2=v2'>, { k1: 'v1', k2: 'v2' }>>,\r\n  Expect<Equal<ParseQueryString<'k1=v1&k2=v2&k1=v2'>, { k1: ['v1', 'v2'], k2: 'v2' }>>,\r\n  Expect<Equal<ParseQueryString<'k1=v1&k2'>, { k1: 'v1', k2: true }>>,\r\n  Expect<Equal<ParseQueryString<'k1=v1&k1=v1'>, { k1: 'v1' }>>\r\n]\n","content":"type ParseQueryString = any\n"},{"dir":"16-medium-pop","id":"16","challenge":"medium","info":{"title":"Pop","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"array","related":"14, 15"},"prefix":"<!--info-header-start--><h1>Pop <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/16/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\n> TypeScript 4.0 is recommended in this challenge\n\nImplement a generic `Pop<T>` that takes an Array `T` and returns an Array without it's last element.\n\nFor example\n\n```ts\ntype arr1 = ['a', 'b', 'c', 'd']\ntype arr2 = [3, 2, 1]\n\ntype re1 = Pop<arr1> // expected to be ['a', 'b', 'c']\ntype re2 = Pop<arr2> // expected to be [3, 2]\n```\n\n**Extra**: Similarly, can you implement `Shift`, `Push` and `Unshift` as well?\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/16/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/16/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/14-easy-first/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-14%E3%83%BBFirst%20of%20Array-7aad0c\" alt=\"14・First of Array\"/></a>  <a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/15-medium-last/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-15%E3%83%BBLast%20of%20Array-d9901a\" alt=\"15・Last of Array\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Pop<[3, 2, 1]>, [3, 2]>>,\n  Expect<Equal<Pop<['a', 'b', 'c', 'd', ]>, ['a', 'b', 'c']>>,\n]\n","content":"type Pop<T extends any[]> = any\n"},{"dir":"17-hard-currying-1","id":"17","challenge":"hard","info":{"title":"Currying 1","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"array","related":"14, 16, 462"},"prefix":"<!--info-header-start--><h1>Currying 1 <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/17/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\n> TypeScript 4.0 is recommended in this challenge\n\n[Currying](https://en.wikipedia.org/wiki/Currying) is the technique of converting a function that takes multiple arguments into a sequence of functions that each take a single argument. \n\nFor example:\n\n```ts\nconst add = (a: number, b: number) => a + b\nconst three = add(1, 2)\n\nconst curriedAdd = Currying(add)\nconst five = curriedAdd(2)(3)\n```\n\nThe function passed to `Currying` may have multiple arguments, you need to correctly type it.\n\nIn this challenge, the curried function only accept one argument at a time. Once all the argument is assigned, it should return its result.\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/17/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/17/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/14-easy-first/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-14%E3%83%BBFirst%20of%20Array-7aad0c\" alt=\"14・First of Array\"/></a>  <a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/16-medium-pop/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-16%E3%83%BBPop-d9901a\" alt=\"16・Pop\"/></a>  <a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/462-extreme-currying-2/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-462%E3%83%BBCurrying%202-b11b8d\" alt=\"462・Currying 2\"/></a> <!--info-footer-end-->\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\nconst curried1 = Currying((a: string, b: number, c: boolean) => true)\nconst curried2 = Currying((a: string, b: number, c: boolean, d: boolean, e: boolean, f: string, g: boolean) => true)\n\ntype cases = [\n  Expect<Equal<\n    typeof curried1, (a: string) => (b: number) => (c: boolean) => true\n  >>,\n  Expect<Equal<\n    typeof curried2, (a: string) => (b: number) => (c: boolean) => (d: boolean) => (e: boolean) => (f: string) => (g: boolean) => true\n  >>,\n]\n","content":"declare function Currying(fn: any): any\n"},{"dir":"18-easy-tuple-length","id":"18","challenge":"easy","info":{"title":"Length of Tuple","author":{"name":"sinoon","email":"sinoon1218@gamil.com","github":"sinoon"},"tags":"tuple"},"prefix":"<!--info-header-start--><h1>Length of Tuple <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23tuple-999\" alt=\"#tuple\"/></h1><blockquote><p>by sinoon <a href=\"https://github.com/sinoon\" target=\"_blank\">@sinoon</a></p></blockquote><p><a href=\"https://tsch.js.org/18/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nFor given a tuple, you need create a generic `Length`, pick the length of the tuple\n\nFor example\n\n```ts\ntype tesla = ['tesla', 'model 3', 'model X', 'model Y']\ntype spaceX = ['FALCON 9', 'FALCON HEAVY', 'DRAGON', 'STARSHIP', 'HUMAN SPACEFLIGHT']\n\ntype teslaLength = Length<tesla>  // expected 4\ntype spaceXLength = Length<spaceX> // expected 5\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/18/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/18/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\nconst tesla = ['tesla', 'model 3', 'model X', 'model Y'] as const\nconst spaceX = ['FALCON 9', 'FALCON HEAVY', 'DRAGON', 'STARSHIP', 'HUMAN SPACEFLIGHT'] as const\n\ntype cases = [\n  Expect<Equal<Length<typeof tesla>, 4>>,\n  Expect<Equal<Length<typeof spaceX>, 5>>,\n]\n","content":"type Length<T extends any> = any\n"},{"dir":"189-easy-awaited","id":"189","challenge":"easy","info":{"difficulty":"easy","title":"Awaited","tags":"promise","editor":{"github":"sinoon","name":"sinoon"},"author":{"github":"maciejsikora","name":"Maciej Sikora"}},"prefix":"<!--info-header-start--><h1>Awaited <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23promise-999\" alt=\"#promise\"/></h1><blockquote><p>by Maciej Sikora <a href=\"https://github.com/maciejsikora\" target=\"_blank\">@maciejsikora</a></p></blockquote><p><a href=\"https://tsch.js.org/189/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nIf we have a type which is wrapped type like Promise. How we can get a type which is inside the wrapped type? For example if we have `Promise<ExampleType>` how to get ExampleType?\n\n> This question is ported from the [original article](https://dev.to/macsikora/advanced-typescript-exercises-question-1-45k4) by [@maciejsikora](https://github.com/maciejsikora)\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/189/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/189/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype X = Promise<string>\r\ntype Y = Promise<{ field: number }>\r\n\r\ntype cases = [\r\n  Expect<Equal<Awaited<X>, string>>,\r\n  Expect<Equal<Awaited<Y>, { field: number }>>,\r\n]\n","content":"type Awaited = any\n"},{"dir":"191-medium-append-argument","id":"191","challenge":"medium","info":{"difficulty":"medium","title":"Append Argument","editor":{"github":"sinoon","name":"sinoon"},"author":{"github":"maciejsikora","name":"Maciej Sikora"},"tags":"arguments"},"prefix":"<!--info-header-start--><h1>Append Argument <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23arguments-999\" alt=\"#arguments\"/></h1><blockquote><p>by Maciej Sikora <a href=\"https://github.com/maciejsikora\" target=\"_blank\">@maciejsikora</a></p></blockquote><p><a href=\"https://tsch.js.org/191/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nFor given function type `Fn`, and any type `A` (any in this context means we don't restrict the type, and I don't have in mind any type 😉) create a generic type which will take `Fn` as the first argument, `A` as the second, and will produce function type `G` which will be the same as `Fn` but with appended argument `A` as a last one.\n\nFor example,\n\n```typescript\ntype Fn = (a: number, b: string) => number\n\ntype Result = AppendArgument<Fn, boolean> \n// expected be (a: number, b: string, x: boolean) => number\n```\n\n> This question is ported from the [original article](https://dev.to/macsikora/advanced-typescript-exercises-question-4-495c) by [@maciejsikora](https://github.com/maciejsikora)\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/191/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/191/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype Case1 = AppendArgument<(a: number, b: string) => number, boolean>\r\ntype Result1 = (a: number, b: string, x: boolean) => number\r\n\r\ntype Case2 = AppendArgument<() => void, undefined>\r\ntype Result2 = (x: undefined) => void\r\n\r\ntype cases = [\r\n  Expect<Equal<Case1, Result1>>,\r\n  Expect<Equal<Case2, Result2>>,\r\n]\r\n","content":"type AppendArgument<Fn, A> = any\n"},{"dir":"2-medium-return-type","id":"2","challenge":"medium","info":{"title":"Get Return Type","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"infer, built-in","tsconfig":null,"original_issues":null,"recommended_solutions":null},"prefix":"<!--info-header-start--><h1>Get Return Type <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/> <img src=\"https://img.shields.io/badge/-%23built--in-999\" alt=\"#built-in\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/2/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the built-in `ReturnType<T>` generic without using it.\n\nFor example\n\n```ts\nconst fn = (v: boolean) => {\n  if (v)\n    return 1\n  else\n    return 2\n}\n\ntype a = MyReturnType<typeof fn> // should be \"1 | 2\"\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/2/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/2/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<string, MyReturnType<() => string>>>,\n  Expect<Equal<123, MyReturnType<() => 123>>>,\n  Expect<Equal<ComplexObject, MyReturnType<() => ComplexObject>>>,\n  Expect<Equal<Promise<boolean>, MyReturnType<() => Promise<boolean>>>>,\n  Expect<Equal<() => 'foo', MyReturnType<() => () => 'foo'>>>,\n  Expect<Equal<1 | 2, MyReturnType<typeof fn>>>,\n  Expect<Equal<1 | 2, MyReturnType<typeof fn1>>>,\n]\n\ntype ComplexObject = {\n  a: [12, 'foo']\n  bar: 'hello'\n  prev(): number\n}\n\nconst fn = (v: boolean) => v ? 1 : 2\nconst fn1 = (v: boolean, w: any) => v ? 1 : 2\n","content":"type MyReturnType<T> = any\n"},{"dir":"20-medium-promise-all","id":"20","challenge":"medium","info":{"difficulty":"medium","title":"Promise.all","tags":"array, built-in","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Promise.all <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/> <img src=\"https://img.shields.io/badge/-%23built--in-999\" alt=\"#built-in\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/20/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nType the function `PromiseAll` that accepts an array of PromiseLike objects, the returning value should be `Promise<T>` where `T` is the resolved result array.\r\n\r\n```ts\r\nconst promise1 = Promise.resolve(3);\r\nconst promise2 = 42;\r\nconst promise3 = new Promise<string>((resolve, reject) => {\r\n  setTimeout(resolve, 100, 'foo');\r\n});\r\n\r\n// expected to be `Promise<[number, number, string]>`\r\nconst p = Promise.all([promise1, promise2, promise3] as const)\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/20/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/20/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\nconst promiseAllTest1 = PromiseAll([1, 2, 3] as const)\r\nconst promiseAllTest2 = PromiseAll([1, 2, Promise.resolve(3)] as const)\r\nconst promiseAllTest3 = PromiseAll([1, 2, Promise.resolve(3)])\r\n\r\ntype cases = [\r\n  Expect<Equal<typeof promiseAllTest1, Promise<[1, 2, 3]>>>,\r\n  Expect<Equal<typeof promiseAllTest2, Promise<[1, 2, number]>>>,\r\n  Expect<Equal<typeof promiseAllTest3, Promise<[number, number, number]>>>\r\n]\r\n","content":"declare function PromiseAll(values: any): any\n"},{"dir":"213-hard-vue-basic-props","id":"213","challenge":"hard","info":{"difficulty":"hard","title":"Vue Basic Props","tags":"vue, application","related":6,"author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Vue Basic Props <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23vue-999\" alt=\"#vue\"/> <img src=\"https://img.shields.io/badge/-%23application-999\" alt=\"#application\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/213/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\n**This challenge continues from [6 - Simple Vue](//tsch.js.org/6), you should finish that one first, and modify your code based on it to start this challenge**.\r\n\r\nIn addition to the Simple Vue, we are now having a new `props` field in the options. This is a simplified version of Vue's `props` option. Here are some of the rules.\r\n\r\n`props` is an object containing each field as the key of the real props injected into `this`. The injected props will be accessible in all the context including `data`, `computed`, and `methods`.\r\n\r\nA prop will be defined either by a constructor or an object with a `type` field containing constructor(s).\r\n\r\nFor example\r\n\r\n```js\r\nprops: {\r\n  foo: Boolean\r\n}\r\n// or\r\nprops: {\r\n  foo: { type: Boolean }\r\n}\r\n```\r\n\r\nshould be inferred to `type Props = { foo: boolean }`.\r\n\r\nWhen passing multiple constructors, the type should be inferred to a union.\r\n\r\n```ts\r\nprops: {\r\n  foo: { type: [Boolean, Number, String] }\r\n}\r\n// -->\r\ntype Props = { foo: boolean | number | string }\r\n```\r\n\r\nWhen an empty object is passed, the key should be inferred to `any`.\r\n\r\nFor more specified cases, check out the Test Cases section.\r\n\r\n> `required`, `default`, and array props in Vue are not considered in this challenge.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/213/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/213/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/6-hard-simple-vue/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-6%E3%83%BBSimple%20Vue-de3d37\" alt=\"6・Simple Vue\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, IsAny, Debug } from '@type-challenges/utils'\r\n\r\nclass ClassA {}\r\n\r\nVueBasicProps({\r\n  props: {\r\n    propA: {},\r\n    propB: { type: String },\r\n    propC: { type: Boolean },\r\n    propD: { type: ClassA },\r\n    propE: { type: [String, Number] },\r\n    propF: RegExp,\r\n  },\r\n  data(this) {\r\n    type PropsType = Debug<typeof this>\r\n    type cases = [\r\n      Expect<IsAny<PropsType['propA']>>,\r\n      Expect<Equal<PropsType['propB'], string>>,\r\n      Expect<Equal<PropsType['propC'], boolean>>,\r\n      Expect<Equal<PropsType['propD'], ClassA>>,\r\n      Expect<Equal<PropsType['propE'], string | number>>,\r\n      Expect<Equal<PropsType['propF'], RegExp>>,\r\n    ]\r\n\r\n    // @ts-expect-error\r\n    this.firstname\r\n    // @ts-expect-error\r\n    this.getRandom()\r\n    // @ts-expect-error\r\n    this.data()\r\n  \r\n    return {\r\n      firstname: 'Type',\r\n      lastname: 'Challenges',\r\n      amount: 10,\r\n    }\r\n  },\r\n  computed: {\r\n    fullname() {\r\n      return `${this.firstname} ${this.lastname}`\r\n    },\r\n  },\r\n  methods: {\r\n    getRandom() {\r\n      return Math.random()\r\n    },\r\n    hi() {\r\n      alert(this.fullname.toLowerCase())\r\n      alert(this.getRandom())\r\n    },\r\n    test() {\r\n      const fullname = this.fullname\r\n      const propE = this.propE\r\n      type cases = [\r\n        Expect<Equal<typeof fullname, string>>,\r\n        Expect<Equal<typeof propE, string | number>>,\r\n      ]\r\n    },\r\n  },\r\n})\n","content":"declare function VueBasicProps(options: any): any\n"},{"dir":"216-extreme-slice","id":"216","challenge":"extreme","info":{"difficulty":"extreme","title":"Slice","tags":"array","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Slice <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/216/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement the JavaScript `Array.slice` function in the type system. `Slice<Arr, Start, End>` takes the tree argument. The output should be a subarray of `Arr` from index `Start` to `End`. Indexes with negative numbers should be counted from reversely.\r\n\r\nFor example\r\n\r\n```ts\r\ntype Arr = [1, 2, 3, 4, 5]\r\ntype Result = Slice<Arr, 2, 4> // expected to be [3, 4]\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/216/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/216/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype Arr = [1, 2, 3, 4, 5]\r\n\r\ntype cases = [\r\n  // basic\r\n  Expect<Equal<Slice<Arr, 0, 1>, [1]>>,\r\n  Expect<Equal<Slice<Arr, 0, 0>, []>>,\r\n  Expect<Equal<Slice<Arr, 2, 4>, [3, 4]>>,\r\n\r\n  // optional args\r\n  Expect<Equal<Slice<[]>, []>>,\r\n  Expect<Equal<Slice<Arr>, Arr>>,\r\n  Expect<Equal<Slice<Arr, 0>, Arr>>,\r\n  Expect<Equal<Slice<Arr, 2>, [3, 4, 5]>>,\r\n\r\n  // negative index\r\n  Expect<Equal<Slice<Arr, 0, -1>, [1,2,3,4]>>,\r\n  Expect<Equal<Slice<Arr, -3, -1>, [3,4]>>,\r\n\r\n  // invalid\r\n  Expect<Equal<Slice<Arr, 10>, []>>,\r\n  Expect<Equal<Slice<Arr, 1, 0>, []>>,\r\n  Expect<Equal<Slice<Arr, 10, 20>, []>>,\r\n]\r\n","content":"type Slice<Arr, Start, End> = any\n"},{"dir":"223-hard-isany","id":"223","challenge":"hard","info":{"difficulty":"hard","title":"IsAny","tags":"utils","author":{"github":"pashutk","name":"Pavel Glushkov"}},"prefix":"<!--info-header-start--><h1>IsAny <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/></h1><blockquote><p>by Pavel Glushkov <a href=\"https://github.com/pashutk\" target=\"_blank\">@pashutk</a></p></blockquote><p><a href=\"https://tsch.js.org/223/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nSometimes it's useful to detect if you have a value with `any` type. This is especially helpful while working with third-party Typescript modules, which can export `any` values in the module API. It's also good to know about `any` when you're suppressing implicitAny checks.\r\n\r\nSo, let's write a utility type `IsAny<T>`, which takes input type `T`. If `T` is `any`, return `true`, otherwise, return `false`.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/223/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/223/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<IsAny<any>, true>>,\r\n  \r\n  Expect<Equal<IsAny<undefined>, false>>,\r\n  Expect<Equal<IsAny<unknown>, false>>,\r\n  Expect<Equal<IsAny<never>, false>>,\r\n  Expect<Equal<IsAny<string>, false>>,\r\n]\n","content":"type IsAny<T> = any\n"},{"dir":"268-easy-if","id":"268","challenge":"easy","info":{"difficulty":"easy","title":"If","tags":"utils","author":{"github":"pashutk","name":"Pavel Glushkov"}},"prefix":"<!--info-header-start--><h1>If <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/></h1><blockquote><p>by Pavel Glushkov <a href=\"https://github.com/pashutk\" target=\"_blank\">@pashutk</a></p></blockquote><p><a href=\"https://tsch.js.org/268/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement a utils `If` which accepts condition `C`, a truthy return type `T`, and a falsy return type `F`. `C` is expected to be either `true` or `false` while `T` and `F` can be any type.\r\n\r\nFor example:\r\n\r\n```ts\r\ntype A = If<true, 'a', 'b'>  // expected to be 'a'\r\ntype B = If<false, 'a', 'b'> // expected to be 'b'\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/268/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/268/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<If<true, 'a', 'b'>, 'a'>>,\r\n  Expect<Equal<If<false, 'a', 2>, 2>>,\r\n]\r\n\r\n// @ts-expect-error\r\ntype error = If<null, 'a', 'b'>\n","content":"type If<C, T, F> = any\n"},{"dir":"270-hard-typed-get","id":"270","challenge":"hard","info":{"difficulty":"hard","title":"Typed Get","tags":"utils, template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Typed Get <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/270/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nThe [`get` function in lodash](https://lodash.com/docs/4.17.15#get) is a quite convenient helper for accessing nested values in JavaScript. However, when we come to TypeScript, using functions like this will make you lose the type information. With TS 4.1's upcoming [Template Literal Types](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#template-literal-types) feature, properly typing `get` becomes possible. Can you implement it?\r\n\r\nFor example,\r\n\r\n```ts\r\ntype Data = {\r\n  foo: {\r\n    bar: {\r\n      value: 'foobar',\r\n      count: 6,\r\n    },\r\n    included: true,\r\n  },\r\n  hello: 'world'\r\n}\r\n  \r\ntype A = Get<Data, 'hello'> // 'world'\r\ntype B = Get<Data, 'foo.bar.count'> // 6\r\ntype C = Get<Data, 'foo.bar'> // { value: 'foobar', count: 6 }\r\n```\r\n\r\nAccessing arrays is not required in this challenge.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/270/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/270/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Get<Data, 'hello'>, 'world'>>,\r\n  Expect<Equal<Get<Data, 'foo.bar.count'>, 6>>,\r\n  Expect<Equal<Get<Data, 'foo.bar'>, { value: 'foobar', count: 6 }>>,\r\n\r\n  Expect<Equal<Get<Data, 'no.existed'>, never>>,\r\n]\r\n\r\ntype Data = {\r\n  foo: {\r\n    bar: {\r\n      value: 'foobar',\r\n      count: 6,\r\n    },\r\n    included: true,\r\n  },\r\n  hello: 'world'\r\n}\n","content":"type Get<T, K> = string\n"},{"dir":"274-extreme-integers-comparator","id":"274","challenge":"extreme","info":{"difficulty":"extreme","title":"Integers Comparator","tags":"template-literal, math","author":{"github":"g-plane","name":"Pig Fang"}},"prefix":"<!--info-header-start--><h1>Integers Comparator <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/> <img src=\"https://img.shields.io/badge/-%23math-999\" alt=\"#math\"/></h1><blockquote><p>by Pig Fang <a href=\"https://github.com/g-plane\" target=\"_blank\">@g-plane</a></p></blockquote><p><a href=\"https://tsch.js.org/274/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type-level integers comparator. We've provided an enum for indicating the comparison result, like this:\r\n\r\n- If `a` is greater than `b`, type should be `Comparison.Greater`.\r\n- If `a` and `b` are equal, type should be `Comparison.Equal`.\r\n- If `a` is lower than `b`, type should be `Comparison.Lower`.\r\n\r\n**Note that `a` and `b` can be positive integers or negative integers or zero, even one is positive while another one is negative.**\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/274/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/274/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Comparator<5, 5>, Comparison.Equal>>,\r\n  Expect<Equal<Comparator<5, 6>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<5, 8>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<5, 0>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<-5, 0>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<0, 0>, Comparison.Equal>>,\r\n  Expect<Equal<Comparator<0, -5>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<5, -3>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<5, -7>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<-5, -7>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<-5, -3>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<-25, -30>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<15, -23>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<40, 37>, Comparison.Greater>>,\r\n  Expect<Equal<Comparator<-36, 36>, Comparison.Lower>>,\r\n  Expect<Equal<Comparator<27, 27>, Comparison.Equal>>,\r\n  Expect<Equal<Comparator<-38, -38>, Comparison.Equal>>,\r\n]\n","content":"enum Comparison {\r\n  Greater,\r\n  Equal,\r\n  Lower,\r\n}\r\n\r\ntype Comparator<A extends number, B extends number> = any\n"},{"dir":"296-medium-permutation","id":"296","challenge":"medium","info":{"difficulty":"medium","title":"Permutation","tags":"union","author":{"github":"pandanoir","name":"Naoto Ikuno"}},"prefix":"<!--info-header-start--><h1>Permutation <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/></h1><blockquote><p>by Naoto Ikuno <a href=\"https://github.com/pandanoir\" target=\"_blank\">@pandanoir</a></p></blockquote><p><a href=\"https://tsch.js.org/296/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement permutation type that transforms union types into the array that includes permutations of unions.\r\n\r\n```typescript\r\ntype perm = Permutation<'A' | 'B' | 'C'>; // ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/296/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/296/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Permutation<'A'>, ['A']>>,\r\n  Expect<Equal<Permutation<'A' | 'B' | 'C'>, ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']>>,\r\n  Expect<Equal<Permutation<'B' | 'A' | 'C'>, ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']>>,\r\n  Expect<Equal<Permutation<never>, []>>,\r\n]\n","content":"type Permutation<T> = any\n"},{"dir":"298-medium-length-of-string","id":"298","challenge":"medium","info":{"difficulty":"medium","title":"Length of String","tags":"template-literal","author":{"github":"g-plane","name":"Pig Fang"}},"prefix":"<!--info-header-start--><h1>Length of String <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Pig Fang <a href=\"https://github.com/g-plane\" target=\"_blank\">@g-plane</a></p></blockquote><p><a href=\"https://tsch.js.org/298/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nCompute the length of a string literal, which behaves like `String#length`.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/298/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/298/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<LengthOfString<''>, 0>>,\r\n  Expect<Equal<LengthOfString<'kumiko'>, 6>>,\r\n  Expect<Equal<LengthOfString<'reina'>, 5>>,\r\n  Expect<Equal<LengthOfString<'Sound! Euphonium'>, 16>>,\r\n]\n","content":"type LengthOfString<S extends string> = any\n"},{"dir":"3-medium-omit","id":"3","challenge":"medium","info":{"title":"Omit","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"union, built-in","related":4},"prefix":"<!--info-header-start--><h1>Omit <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/> <img src=\"https://img.shields.io/badge/-%23built--in-999\" alt=\"#built-in\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/3/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the built-in `Omit<T, K>` generic without using it.\n\nConstructs a type by picking all properties from `T` and then removing `K`\n\nFor example\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyOmit<Todo, 'description' | 'title'>\n\nconst todo: TodoPreview = {\n  completed: false,\n}\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/3/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/3/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/4-easy-pick/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-4%E3%83%BBPick-7aad0c\" alt=\"4・Pick\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Expected1, MyOmit<Todo, 'description'>>>,\n  Expect<Equal<Expected2, MyOmit<Todo, 'description' | 'completed'>>>\n]\n\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ninterface Expected1 {\n  title: string\n  completed: boolean\n}\n\ninterface Expected2 {\n  title: string\n}\n","content":"type MyOmit<T, K> = any\n"},{"dir":"300-hard-string-to-number","id":"300","challenge":"hard","info":{"difficulty":"hard","title":"String to Number","tags":"template-literal","author":{"github":"g-plane","name":"Pig Fang"}},"prefix":"<!--info-header-start--><h1>String to Number <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Pig Fang <a href=\"https://github.com/g-plane\" target=\"_blank\">@g-plane</a></p></blockquote><p><a href=\"https://tsch.js.org/300/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nConvert a string literal to a number, which behaves like `Number.parseInt`.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/300/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/300/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<ToNumber<'0'>, 0>>,\r\n  Expect<Equal<ToNumber<'5'>, 5>>,\r\n  Expect<Equal<ToNumber<'12'>, 12>>,\r\n  Expect<Equal<ToNumber<'27'>, 27>>,\r\n]\n","content":"type ToNumber<S extends string> = any\n"},{"dir":"399-hard-tuple-filter","id":"399","challenge":"hard","info":{"difficulty":"hard","title":"Tuple Filter","tags":"tuple, infer","author":{"github":"softoika","name":"Ryo Hanafusa"}},"prefix":"<!--info-header-start--><h1>Tuple Filter <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23tuple-999\" alt=\"#tuple\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/></h1><blockquote><p>by Ryo Hanafusa <a href=\"https://github.com/softoika\" target=\"_blank\">@softoika</a></p></blockquote><p><a href=\"https://tsch.js.org/399/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement a type `FilterOut<T, F>` that filters out items of the given type `F` from the tuple `T`.\r\n\r\nFor example,\r\n```ts\r\ntype Filtered = FilterOut<[1, 2, null, 3], null> // [1, 2, 3]\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/399/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/399/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<FilterOut<[], never>, []>>,\r\n  Expect<Equal<FilterOut<[never], never>, []>>,\r\n  Expect<Equal<FilterOut<['a', never], never>, ['a']>>,\r\n  Expect<Equal<FilterOut<[1, never, 'a'], never>, [1, 'a']>>,\r\n  Expect<Equal<FilterOut<[never, 1, 'a', undefined, false, null], never | null | undefined>, [1, 'a', false]>>,\r\n  Expect<Equal<FilterOut<[number | null | undefined, never], never | null | undefined>, [number | null | undefined]>>\r\n]\n","content":"type FilterOut<T extends any[], F> = any\n"},{"dir":"4-easy-pick","id":"4","challenge":"easy","info":{"title":"Pick","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"union, built-in","related":3},"prefix":"<!--info-header-start--><h1>Pick <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/> <img src=\"https://img.shields.io/badge/-%23built--in-999\" alt=\"#built-in\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/4/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the built-in `Pick<T, K>` generic without using it.\n\nConstructs a type by picking the set of properties `K` from `T`\n\nFor example\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyPick<Todo, 'title' | 'completed'>\n\nconst todo: TodoPreview = {\n    title: 'Clean room',\n    completed: false,\n}\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/4/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/4/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/3-medium-omit/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-3%E3%83%BBOmit-d9901a\" alt=\"3・Omit\"/></a> <!--info-footer-end-->\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Expected1, MyPick<Todo, 'title'>>>,\n  Expect<Equal<Expected2, MyPick<Todo, 'title' | 'completed'>>>,\n  // @ts-expect-error\n  MyPick<Todo, 'title' | 'completed' | 'invalid'>,\n]\n\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ninterface Expected1 {\n  title: string\n}\n\ninterface Expected2 {\n  title: string\n  completed: boolean\n}\n","content":"type MyPick<T, K> = any\n"},{"dir":"43-easy-exclude","id":"43","challenge":"easy","info":{"difficulty":"easy","title":"Exclude","author":{"github":"zheeeng","name":"Zheeeng"},"tags":"built-in"},"prefix":"<!--info-header-start--><h1>Exclude <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23built--in-999\" alt=\"#built-in\"/></h1><blockquote><p>by Zheeeng <a href=\"https://github.com/zheeeng\" target=\"_blank\">@zheeeng</a></p></blockquote><p><a href=\"https://tsch.js.org/43/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the built-in Exclude<T, U>\r\n> Exclude from T those types that are assignable to U\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/43/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/43/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    Expect<Equal<MyExclude<\"a\" | \"b\" | \"c\", \"a\">, Exclude<\"a\" | \"b\" | \"c\", \"a\">>>,\r\n    Expect<Equal<MyExclude<\"a\" | \"b\" | \"c\", \"a\" | \"b\">, Exclude<\"a\" | \"b\" | \"c\", \"a\" | \"b\">>>,\r\n    Expect<Equal<MyExclude<string | number | (() => void), Function>, Exclude<string | number | (() => void), Function>>>,\r\n]\n","content":"type MyExclude<T, U> = any\n"},{"dir":"459-medium-flatten","id":"459","challenge":"medium","info":{"difficulty":"medium","title":"Flatten","tags":"array","author":{"github":"chbro","name":"zhouyiming"}},"prefix":"<!--info-header-start--><h1>Flatten <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by zhouyiming <a href=\"https://github.com/chbro\" target=\"_blank\">@chbro</a></p></blockquote><p><a href=\"https://tsch.js.org/459/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nIn this challenge, you would need to write a type that takes an array and emitted the flatten array type.\r\n\r\nFor example:\r\n\r\n```ts\r\ntype flatten = Flatten<[1, 2, [3, 4], [[[5]]]> // [1, 2, 3, 4, 5]\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/459/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/459/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Flatten<[]>, []>>,\r\n  Expect<Equal<Flatten<[1, 2, 3, 4]>, [1, 2, 3, 4]>>,\r\n  Expect<Equal<Flatten<[1, [2]]>, [1, 2]>>,\r\n  Expect<Equal<Flatten<[1, 2, [3, 4], [[[5]]]]>, [1, 2, 3, 4, 5]>>,\r\n  Expect<Equal<Flatten<[{foo: 'bar'; 2: 10}, 'foobar']>, [{foo: 'bar'; 2: 10}, 'foobar']>>,\r\n]\r\n","content":"type Flatten = any\n"},{"dir":"462-extreme-currying-2","id":"462","challenge":"extreme","info":{"difficulty":"extreme","title":"Currying 2","author":{"github":"hubvue","name":"Kim"},"related":17},"prefix":"<!--info-header-start--><h1>Currying 2 <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> </h1><blockquote><p>by Kim <a href=\"https://github.com/hubvue\" target=\"_blank\">@hubvue</a></p></blockquote><p><a href=\"https://tsch.js.org/462/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a> </p><!--info-header-end-->\r\n\r\n[Currying](https://en.wikipedia.org/wiki/Currying) is the technique of converting a function that takes multiple arguments into a sequence of functions that each take a single argument.\r\n\r\nBut in our daily life, currying dynamic arguments is also commonly used, for example, the `Function.bind(this, [...params])` API.\r\n\r\n```ts\r\nconst func = (a: number, b: number, c: number) => {\r\n  return a + b + c\r\n}\r\n\r\nconst bindFunc = func(null, 1, 2)\r\n\r\nconst result = bindFunc(3) // result: 6\r\n```\r\n\r\nThus, based on `Currying 1`, we would need to have the dynamic argument version:\r\n\r\n```ts\r\nconst add = (a: number, b: number, c: number) => a + b + c\r\nconst three = add(1, 1, 1) \r\n\r\nconst curriedAdd = DynamicParamsCurrying(add)\r\nconst six = curriedAdd(1, 2, 3)\r\nconst seven = curriedAdd(1, 2)(4)\r\nconst eight = curriedAdd(2)(3)(4)\r\n```\r\n\r\nIn this challenge, `DynamicParamsCurrying` may take a function with zero to multiple arguments, you need to correctly type it. The returned function may accept at least one argument. When all the arguments as satisfied, it should yield the return type of the original function correctly.\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/462/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/462/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/17-hard-currying-1/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-17%E3%83%BBCurrying%201-de3d37\" alt=\"17・Currying 1\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\nconst curried1 = DynamicParamsCurrying((a: string, b: number, c: boolean) => true)\r\nconst curried2 = DynamicParamsCurrying((a: string, b: number, c: boolean, d: boolean, e: boolean, f: string, g: boolean) => true)\r\n\r\nconst curried1Return1 = curried1('123')(123)(true)\r\nconst curried1Return2 = curried1('123', 123)(false)\r\nconst curried1Return3 = curried1('123', 123, true)\r\n\r\nconst curried2Return1 = curried2('123')(123)(true)(false)(true)('123')(false)\r\nconst curried2Return2 = curried2('123', 123)(true, false)(true, '123')(false)\r\nconst curried2Return3 = curried2('123', 123)(true)(false)(true, '123', false)\r\nconst curried2Return4 = curried2('123', 123, true)(false, true, '123')(false)\r\nconst curried2Return5 = curried2('123', 123, true)(false)(true)('123')(false)\r\nconst curried2Return6 = curried2('123', 123, true, false)(true, '123', false)\r\nconst curried2Return7 = curried2('123', 123, true, false, true)('123', false)\r\nconst curried2Return8 = curried2('123', 123, true, false, true)('123')(false)\r\nconst curried2Return9 = curried2('123', 123, true, false, true, '123')(false)\r\nconst curried2Return10 = curried2('123', 123, true, false, true, '123', false)\r\n\r\ntype cases = [\r\n  Expect<Equal< typeof curried1Return1, boolean>>,\r\n  Expect<Equal< typeof curried1Return2, boolean>>,\r\n  Expect<Equal< typeof curried1Return3, boolean>>,\r\n\r\n  Expect<Equal< typeof curried2Return1, boolean>>,\r\n  Expect<Equal< typeof curried2Return2, boolean>>,\r\n  Expect<Equal< typeof curried2Return3, boolean>>,\r\n  Expect<Equal< typeof curried2Return4, boolean>>,\r\n  Expect<Equal< typeof curried2Return5, boolean>>,\r\n  Expect<Equal< typeof curried2Return6, boolean>>,\r\n  Expect<Equal< typeof curried2Return7, boolean>>,\r\n  Expect<Equal< typeof curried2Return8, boolean>>,\r\n  Expect<Equal< typeof curried2Return9, boolean>>,\r\n  Expect<Equal< typeof curried2Return10, boolean>>,\r\n]\r\n","content":"declare function DynamicParamsCurrying(fn: any): any\n"},{"dir":"472-hard-tuple-to-enum-object","id":"472","challenge":"hard","info":{"difficulty":"hard","title":"Tuple to Enum Object","tags":"tuple, template-literal","author":{"github":"softoika","name":"Ryo Hanafusa"}},"prefix":"<!--info-header-start--><h1>Tuple to Enum Object <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23tuple-999\" alt=\"#tuple\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Ryo Hanafusa <a href=\"https://github.com/softoika\" target=\"_blank\">@softoika</a></p></blockquote><p><a href=\"https://tsch.js.org/472/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nThe enum is an original syntax of TypeScript (it does not exist in JavaScript). So it is converted to like the following form as a result of transpilation:\r\n```js\r\nlet OperatingSystem;\r\n(function (OperatingSystem) {\r\n    OperatingSystem[OperatingSystem[\"MacOS\"] = 0] = \"MacOS\";\r\n    OperatingSystem[OperatingSystem[\"Windows\"] = 1] = \"Windows\";\r\n    OperatingSystem[OperatingSystem[\"Linux\"] = 2] = \"Linux\";\r\n})(OperatingSystem || (OperatingSystem = {}));\r\n```\r\nIn this question, the type should convert a given string tuple to an object that behaves like an enum.\r\nMoreover, the property of an enum is preferably a pascal case.\r\n```ts\r\nEnum<[\"macOS\", \"Windows\", \"Linux\"]>\r\n// -> { readonly MacOS: \"macOS\", readonly Windows: \"Windows\", readonly Linux: \"Linux\" }\r\n```\r\nIf `true` is given in the second argument, the value should be a number literal.\r\n```ts\r\nEnum<[\"macOS\", \"Windows\", \"Linux\"], true>\r\n// -> { readonly MacOS: 0, readonly Windows: 1, readonly Linux: 2 }\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/472/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/472/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\nconst OperatingSystem = ['macOS', 'Windows', 'Linux'] as const\r\nconst Command = ['echo', 'grep', 'sed', 'awk', 'cut', 'uniq', 'head', 'tail', 'xargs', 'shift'] as const\r\n\r\ntype cases = [\r\n  Expect<Equal<Enum<[]>, {}>>,\r\n  Expect<Equal<\r\n  Enum<typeof OperatingSystem>,\r\n  {\r\n    readonly MacOS: 'macOS'\r\n    readonly Windows: 'Windows'\r\n    readonly Linux: 'Linux'\r\n  }\r\n  >>,\r\n  Expect<Equal<\r\n  Enum<typeof OperatingSystem, true>,\r\n  {\r\n    readonly MacOS: 0\r\n    readonly Windows: 1\r\n    readonly Linux: 2\r\n  }\r\n  >>,\r\n  Expect<Equal<\r\n  Enum<typeof Command>,\r\n  {\r\n    readonly Echo: 'echo'\r\n    readonly Grep: 'grep'\r\n    readonly Sed: 'sed'\r\n    readonly Awk: 'awk'\r\n    readonly Cut: 'cut'\r\n    readonly Uniq: 'uniq'\r\n    readonly Head: 'head'\r\n    readonly Tail: 'tail'\r\n    readonly Xargs: 'xargs'\r\n    readonly Shift: 'shift'\r\n  }\r\n  >>,\r\n  Expect<Equal<\r\n  Enum<typeof Command, true>,\r\n  {\r\n    readonly Echo: 0\r\n    readonly Grep: 1\r\n    readonly Sed: 2\r\n    readonly Awk: 3\r\n    readonly Cut: 4\r\n    readonly Uniq: 5\r\n    readonly Head: 6\r\n    readonly Tail: 7\r\n    readonly Xargs: 8\r\n    readonly Shift: 9\r\n  }\r\n  >>\r\n]\r\n","content":"type Enum<T extends readonly string[], N extends boolean = false> = any\n"},{"dir":"476-extreme-sum","id":"476","challenge":"extreme","info":{"difficulty":"extreme","title":"Sum","tags":"math, template-literal","author":{"github":"uid11","name":null}},"prefix":"<!--info-header-start--><h1>Sum <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23math-999\" alt=\"#math\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by null <a href=\"https://github.com/uid11\" target=\"_blank\">@uid11</a></p></blockquote><p><a href=\"https://tsch.js.org/476/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type `Sum<A, B>` that summing two non-negative integers and returns the sum as a string. Numbers can be specified as a string, number, or bigint.\r\n\r\nFor example,\r\n\r\n```ts\r\ntype T0 = Sum<2, 3> // '5'\r\ntype T1 = Sum<'13', '21'> // '34'\r\ntype T2 = Sum<'328', 7> // '335'\r\ntype T3 = Sum<1_000_000_000_000n, '123'> // '1000000000123'\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/476/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/476/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Sum<2, 3>, '5'>>,\r\n  Expect<Equal<Sum<'13', '21'>, '34'>>,\r\n  Expect<Equal<Sum<'328', 7>, '335'>>,\r\n  Expect<Equal<Sum<1_000_000_000_000n, '123'>, '1000000000123'>>,\r\n  Expect<Equal<Sum<9999, 1>, '10000'>>,\r\n  Expect<Equal<Sum<4325234, '39532'>, '4364766'>>,\r\n  Expect<Equal<Sum<728, 0>, '728'>>,\r\n  Expect<Equal<Sum<'0', 213>, '213'>>,\r\n  Expect<Equal<Sum<0, '0'>, '0'>>\r\n]\r\n","content":"type Sum<A extends string | number | bigint, B extends string | number | bigint> = string\n"},{"dir":"5-extreme-readonly-keys","id":"5","challenge":"extreme","info":{"title":"Get Readonly Keys","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"utils, object-keys"},"prefix":"<!--info-header-start--><h1>Get Readonly Keys <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/> <img src=\"https://img.shields.io/badge/-%23object--keys-999\" alt=\"#object-keys\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/5/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement a generic `GetReadonlyKeys<T>` that returns a union of the readonly keys of an Object.\n\nFor example\n\n```ts\ninterface Todo {\n  readonly title: string\n  readonly description: string\n  completed: boolean\n}\n\ntype Keys = GetReadonlyKeys<Todo> // expected to be \"title\" | \"description\"\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/5/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/5/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<'title', GetReadonlyKeys<Todo1>>>,\n  Expect<Equal<'title' | 'description', GetReadonlyKeys<Todo2>>>,\n]\n\ninterface Todo1 {\n  readonly title: string\n  description: string\n  completed: boolean\n}\n\ninterface Todo2 {\n  readonly title: string\n  readonly description: string\n  completed?: boolean\n}\n","content":"type GetReadonlyKeys<T> = any\n"},{"dir":"517-extreme-multiply","id":"517","challenge":"extreme","info":{"difficulty":"extreme","title":"Multiply","tags":"math, template-literal","related":476,"author":{"github":"uid11","name":null}},"prefix":"<!--info-header-start--><h1>Multiply <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23math-999\" alt=\"#math\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by null <a href=\"https://github.com/uid11\" target=\"_blank\">@uid11</a></p></blockquote><p><a href=\"https://tsch.js.org/517/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\n**This challenge continues from [476 - Sum](https://tsch.js.org/476), it is recommended that you finish that one first, and modify your code based on it to start this challenge.**\r\n\r\nImplement a type `Multiply<A, B>` that multiplies two non-negative integers and returns their product as a string. Numbers can be specified as string, number, or bigint.\r\n\r\nFor example,\r\n\r\n```ts\r\ntype T0 = Multiply<2, 3> // '6'\r\ntype T1 = Multiply<3, '5'> // '15'\r\ntype T2 = Multiply<'4', 10> // '40'\r\ntype T3 = Multiply<0, 16> // '0'\r\ntype T4 = Multiply<'13', '21'> // '273'\r\ntype T5 = Multiply<'43423', 321543n> // '13962361689'\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/517/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/517/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/476-extreme-sum/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-476%E3%83%BBSum-b11b8d\" alt=\"476・Sum\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Multiply<2, 3>, '6'>>,\r\n  Expect<Equal<Multiply<3, '5'>, '15'>>,\r\n  Expect<Equal<Multiply<'4', 10>, '40'>>,\r\n  Expect<Equal<Multiply<0, 16>, '0'>>,\r\n  Expect<Equal<Multiply<'13', '21'>, '273'>>,\r\n  Expect<Equal<Multiply<'43423', 321543n>, '13962361689'>>,\r\n  Expect<Equal<Multiply<9999, 1>, '9999'>>,\r\n  Expect<Equal<Multiply<4325234, '39532'>, '170985150488'>>,\r\n  Expect<Equal<Multiply<100_000n, '1'>, '100000'>>,\r\n  Expect<Equal<Multiply<259, 9125385>, '2363474715'>>,\r\n  Expect<Equal<Multiply<9, 99>, '891'>>,\r\n  Expect<Equal<Multiply<315, '100'>, '31500'>>,\r\n  Expect<Equal<Multiply<11n, 13n>, '143'>>,\r\n  Expect<Equal<Multiply<728, 0>, '0'>>,\r\n  Expect<Equal<Multiply<'0', 213>, '0'>>,\r\n  Expect<Equal<Multiply<0, '0'>, '0'>>\r\n]\r\n","content":"type Multiply<A extends string | number | bigint, B extends string | number | bigint> = string\n"},{"dir":"527-medium-append-to-object","id":"527","challenge":"medium","info":{"difficulty":"medium","title":"Append to object","tags":"object-keys","author":{"github":"bre30kra69cs","name":"Andrey Krasovsky"}},"prefix":"<!--info-header-start--><h1>Append to object <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23object--keys-999\" alt=\"#object-keys\"/></h1><blockquote><p>by Andrey Krasovsky <a href=\"https://github.com/bre30kra69cs\" target=\"_blank\">@bre30kra69cs</a></p></blockquote><p><a href=\"https://tsch.js.org/527/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement a type that adds a new field to the interface. The type takes the three arguments. The output should be an object with the new field\r\n\r\nFor example\r\n\r\n```ts\r\ntype Test = { id: '1' }\r\ntype Result = AppendToObject<Test, 'value', 4> // expected to be { id: '1', value: 4 }\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/527/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/527/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype test1 = {\r\n  key: 'cat'\r\n  value: 'green'\r\n}\r\n\r\ntype testExpect1 = {\r\n  key: 'cat'\r\n  value: 'green'\r\n  home: boolean\r\n}\r\n\r\ntype test2 = {\r\n  key: 'dog' | undefined\r\n  value: 'white'\r\n  sun: true\r\n}\r\n\r\ntype testExpect2 = {\r\n  key: 'dog' | undefined\r\n  value: 'white'\r\n  sun: true\r\n  home: 1\r\n}\r\n\r\ntype test3 = {\r\n  key: 'cow'\r\n  value: 'yellow'\r\n  sun: false\r\n}\r\n\r\ntype testExpect3 = {\r\n  key: 'cow'\r\n  value: 'yellow'\r\n  sun: false\r\n  isMotherRussia: false | undefined\r\n}\r\n\r\ntype cases = [\r\n  Expect<Equal<AppendToObject<test1, 'home', boolean>, testExpect1>>,\r\n  Expect<Equal<AppendToObject<test2, 'home', 1>, testExpect2>>,\r\n  Expect<Equal<AppendToObject<test3, 'isMotherRussia', false | undefined>, testExpect3>>,\r\n]\r\n","content":"type AppendToObject<T, U, V> = any\n"},{"dir":"529-medium-absolute","id":"529","challenge":"medium","info":{"difficulty":"medium","title":"Absolute","tags":"math, template-literal","author":{"github":"bre30kra69cs","name":"Andrey Krasovsky"}},"prefix":"<!--info-header-start--><h1>Absolute <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23math-999\" alt=\"#math\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Andrey Krasovsky <a href=\"https://github.com/bre30kra69cs\" target=\"_blank\">@bre30kra69cs</a></p></blockquote><p><a href=\"https://tsch.js.org/529/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement the `Absolute` type. A type that take string, number or bigint. The output should be a positive number string\r\n\r\nFor example\r\n\r\n```ts\r\ntype Test = -100;\r\ntype Result = Absolute<Test>; // expected to be \"100\"\r\n```\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/529/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/529/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Absolute<0>, '0'>>,\r\n  Expect<Equal<Absolute<-0>, '0'>>,\r\n  Expect<Equal<Absolute<10>, '10'>>,\r\n  Expect<Equal<Absolute<-5>, '5'>>,\r\n  Expect<Equal<Absolute<'0'>, '0'>>,\r\n  Expect<Equal<Absolute<'-0'>, '0'>>,\r\n  Expect<Equal<Absolute<'10'>, '10'>>,\r\n  Expect<Equal<Absolute<'-5'>, '5'>>,\r\n  Expect<Equal<Absolute<-1_000_000n>, '1000000'>>,\r\n  Expect<Equal<Absolute<9_999n>, '9999'>>,\r\n]\r\n","content":"type Absolute<T extends number | string | bigint> = any\n"},{"dir":"531-medium-string-to-union","id":"531","challenge":"medium","info":{"difficulty":"medium","title":"String to Union","tags":"union, string","author":{"github":"bre30kra69cs","name":"Andrey Krasovsky"}},"prefix":"<!--info-header-start--><h1>String to Union <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/> <img src=\"https://img.shields.io/badge/-%23string-999\" alt=\"#string\"/></h1><blockquote><p>by Andrey Krasovsky <a href=\"https://github.com/bre30kra69cs\" target=\"_blank\">@bre30kra69cs</a></p></blockquote><p><a href=\"https://tsch.js.org/531/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement the String to Union type. Type take string argument. The output should be a union of input letters\r\n\r\nFor example\r\n\r\n```ts\r\ntype Test = '123';\r\ntype Result = StringToUnion<Test>; // expected to be \"1\" | \"2\" | \"3\"\r\n```\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/531/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/531/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<StringToUnion<\"\">, never>>,\r\n  Expect<Equal<StringToUnion<\"t\">, \"t\">>,\r\n  Expect<Equal<StringToUnion<\"hello\">, \"h\" | \"e\" | \"l\" | \"l\" | \"o\">>,\r\n  Expect<Equal<StringToUnion<\"coronavirus\">, \"c\" | \"o\" | \"r\" | \"o\" | \"n\" | \"a\" | \"v\" | \"i\" | \"r\" | \"u\" | \"s\">>,\r\n]\r\n","content":"type StringToUnion<T extends string> = any\n"},{"dir":"533-easy-concat","id":"533","challenge":"easy","info":{"difficulty":"easy","title":"Concat","tags":"array","author":{"github":"bre30kra69cs","name":"Andrey Krasovsky"}},"prefix":"<!--info-header-start--><h1>Concat <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Andrey Krasovsky <a href=\"https://github.com/bre30kra69cs\" target=\"_blank\">@bre30kra69cs</a></p></blockquote><p><a href=\"https://tsch.js.org/533/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nImplement the JavaScript `Array.concat` function in the type system. A type takes the two arguments. The output should be a new array that includes inputs in ltr order\r\n\r\nFor example\r\n\r\n```ts\r\ntype Result = Concat<[1], [2]> // expected to be [1, 2]\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/533/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/533/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Concat<[], []>, []>>,\r\n  Expect<Equal<Concat<[], [1]>, [1]>>,\r\n  Expect<Equal<Concat<[1, 2], [3, 4]>, [1, 2, 3, 4]>>,\r\n  Expect<Equal<Concat<['1', 2, '3'], [false, boolean, '4']>, ['1', 2, '3', false, boolean, '4']>>,\r\n]\r\n","content":"type Concat<T, U> = any\n"},{"dir":"545-hard-printf","id":"545","challenge":"hard","info":{"difficulty":"hard","title":"printf","tags":"template-literal","author":{"github":"BestMaster-YS","name":null}},"prefix":"<!--info-header-start--><h1>printf <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by null <a href=\"https://github.com/BestMaster-YS\" target=\"_blank\">@BestMaster-YS</a></p></blockquote><p><a href=\"https://tsch.js.org/545/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement `Format<T extends string>` generic.\r\n\r\nFor example,\r\n\r\n```ts\r\ntype FormatCase1 = Format<\"%sabc\"> // FormatCase1 : string => string\r\ntype FormatCase2 = Format<\"%s%dabc\"> // FormatCase2 : string => number => string\r\ntype FormatCase3 = Format<\"sdabc\"> // FormatCase3 :  string\r\ntype FormatCase4 = Format<\"sd%abc\"> // FormatCase4 :  string\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/545/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/545/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Format<'abc'>, string>>,\r\n  Expect<Equal<Format<'a%sbc'>, (s1: string) => string>>,\r\n  Expect<Equal<Format<'a%dbc'>, (d1: number) => string>>,\r\n  Expect<Equal<Format<'a%dbc%s'>, (d1: number) => (s1: string) => string>>\r\n]\n","content":"type Format<T extends string> = any\n"},{"dir":"55-hard-union-to-intersection","id":"55","challenge":"hard","info":{"difficulty":"hard","title":"Union to Intersection","tags":"utils, infer","author":{"github":"zheeeng","name":"Zheeeng"}},"prefix":"<!--info-header-start--><h1>Union to Intersection <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/></h1><blockquote><p>by Zheeeng <a href=\"https://github.com/zheeeng\" target=\"_blank\">@zheeeng</a></p></blockquote><p><a href=\"https://tsch.js.org/55/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the advanced util type `UnionToIntersection<U>`\r\n\r\nFor example\r\n\r\n```ts\r\ntype I = Union2Intersection<'foo' | 42 | true> // expected to be 'foo' & 42 & true\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/55/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/55/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    Expect<Equal<UnionToIntersection<'foo' | 42 | true>, 'foo' & 42 & true>>,\r\n    Expect<Equal<UnionToIntersection<(() => 'foo') | ((i: 42) => true)>, (() => 'foo') & ((i: 42) => true)>>,\r\n]\n","content":"type UnionToIntersection<U> = any\n"},{"dir":"553-hard-deep-object-to-unique","id":"553","challenge":"hard","info":{"difficulty":"hard","title":"Deep object to unique","tags":"deep","author":{"github":"uid11","name":null}},"prefix":"<!--info-header-start--><h1>Deep object to unique <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23deep-999\" alt=\"#deep\"/></h1><blockquote><p>by null <a href=\"https://github.com/uid11\" target=\"_blank\">@uid11</a></p></blockquote><p><a href=\"https://tsch.js.org/553/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nTypeScript has structural type system, but sometimes you want a function to accept only some previously well-defined unique objects (as in the nominal type system), and not any objects that have the required fields.\r\n\r\nCreate a type that takes an object and makes it and all deeply nested objects in it unique, while preserving the string and numeric keys of all objects, and the values of all properties on these keys.\r\n\r\nThe original type and the resulting unique type must be mutually assignable, but not identical. \r\n\r\nFor example,\r\n\r\n```ts\r\nimport { Equal } from \"@type-challenges/utils\"\r\n\r\ntype Foo = { foo: 2; bar: { 0: 1 }; baz: { 0: 1 } }\r\n\r\ntype UniqFoo = DeepObjectToUniq<Foo>\r\n\r\ndeclare let foo: Foo\r\ndeclare let uniqFoo: UniqFoo\r\n\r\nuniqFoo = foo // ok\r\nfoo = uniqFoo // ok\r\n\r\ntype T0 = Equal<UniqFoo, Foo> // false\r\ntype T1 = UniqFoo[\"foo\"] // 2\r\ntype T2 = Equal<UniqFoo[\"bar\"], UniqFoo[\"baz\"]> // false\r\ntype T3 = UniqFoo[\"bar\"][0] // 1\r\ntype T4 = Equal<keyof Foo & string, keyof UniqFoo & string> // true\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/553/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/553/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, IsTrue, IsFalse } from \"@type-challenges/utils\"\r\n\r\ntype Quz = { quz: 4 }\r\n\r\ntype Foo = { foo: 2; baz: Quz; bar: Quz }\r\ntype Bar = { foo: 2; baz: Quz; bar: Quz & { quzz?: 0 } }\r\n\r\ntype UniqFoo = DeepObjectToUniq<Foo>\r\ntype UniqBar = DeepObjectToUniq<Bar>\r\n\r\ndeclare let foo: Foo\r\ndeclare let uniqFoo: UniqFoo\r\n\r\nuniqFoo = foo\r\nfoo = uniqFoo\r\n\r\ntype cases = [\r\n  IsFalse<Equal<UniqFoo, Foo>>,\r\n  IsTrue<Equal<UniqFoo[\"foo\"], Foo[\"foo\"]>>,\r\n  IsTrue<Equal<UniqFoo[\"bar\"][\"quz\"], Foo[\"bar\"][\"quz\"]>>,\r\n  IsFalse<Equal<UniqFoo[\"bar\"], UniqFoo[\"baz\"]>>,\r\n  IsFalse<Equal<UniqBar[\"baz\"], UniqFoo[\"baz\"]>>,\r\n  IsTrue<Equal<keyof UniqBar[\"baz\"], keyof UniqFoo[\"baz\"]>>,\r\n  IsTrue<Equal<keyof Foo, keyof UniqFoo & string>>\r\n];\n","content":"type DeepObjectToUniq<O extends object> = any\n"},{"dir":"57-hard-get-required","id":"57","challenge":"hard","info":{"difficulty":"hard","title":"Get Required","tags":"utils, infer","author":{"github":"zheeeng","name":"Zheeeng"}},"prefix":"<!--info-header-start--><h1>Get Required <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/></h1><blockquote><p>by Zheeeng <a href=\"https://github.com/zheeeng\" target=\"_blank\">@zheeeng</a></p></blockquote><p><a href=\"https://tsch.js.org/57/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the advanced util type `GetRequired<T>`, which remains all the required fields\r\n\r\nFor example\r\n\r\n```ts\r\ntype I = GetRequired<{ foo: number, bar?: string }> // expected to be { foo: number }\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/57/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/57/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    Expect<Equal<GetRequired<{ foo: number, bar?: string }>, { foo: number }>>,\r\n    Expect<Equal<GetRequired<{ foo: undefined, bar?: undefined }>, { foo: undefined }>>,\r\n]\n","content":"type GetRequired<T> = any\n"},{"dir":"59-hard-get-optional","id":"59","challenge":"hard","info":{"difficulty":"hard","title":"Get Optional","tags":"utils, infer","author":{"github":"zheeeng","name":"Zheeeng"}},"prefix":"<!--info-header-start--><h1>Get Optional <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/></h1><blockquote><p>by Zheeeng <a href=\"https://github.com/zheeeng\" target=\"_blank\">@zheeeng</a></p></blockquote><p><a href=\"https://tsch.js.org/59/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the advanced util type `GetOptional<T>`, which remains all the optional fields\r\n\r\nFor example\r\n\r\n```ts\r\ntype I = GetOptional<{ foo: number, bar?: string }> // expected to be { bar?: string }\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/59/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/59/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    Expect<Equal<GetOptional<{ foo: number, bar?: string }>, { bar?: string }>>,\r\n    Expect<Equal<GetOptional<{ foo: undefined, bar?: undefined }>, { bar?: undefined }>>,\r\n]","content":"type GetOptional<T> = any\n"},{"dir":"599-medium-merge","id":"599","challenge":"medium","info":{"difficulty":"medium","title":"Merge","tags":"object","author":{"github":"ZYSzys","name":"ZYSzys"}},"prefix":"<!--info-header-start--><h1>Merge <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23object-999\" alt=\"#object\"/></h1><blockquote><p>by ZYSzys <a href=\"https://github.com/ZYSzys\" target=\"_blank\">@ZYSzys</a></p></blockquote><p><a href=\"https://tsch.js.org/599/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nMerge two types into a new type. Keys of the second type overrides keys of the first type.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/599/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/599/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype Foo = {\r\n  a: number;\r\n  b: string;\r\n};\r\ntype Bar = {\r\n  b: number;\r\n};\r\n\r\ntype cases = [\r\n  Expect<Equal<Merge<Foo, Bar>, {\r\n\ta: number;\r\n\tb: number;\r\n  }>>\r\n]\n","content":"type Merge<F, S> = any;\n"},{"dir":"6-hard-simple-vue","id":"6","challenge":"hard","info":{"title":"Simple Vue","author":{"name":"Anthony Fu","github":"antfu"},"tags":"this, application, vue","related":213},"prefix":"<!--info-header-start--><h1>Simple Vue <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23this-999\" alt=\"#this\"/> <img src=\"https://img.shields.io/badge/-%23application-999\" alt=\"#application\"/> <img src=\"https://img.shields.io/badge/-%23vue-999\" alt=\"#vue\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/6/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement a simpiled version of a Vue-like typing support.\n\nBy providing a function name `SimpleVue` (similar to `Vue.extend` or `defineComponent`), it should properly infer the `this` type inside computed and methods.\n\nIn this challenge, we assume that SimpleVue take an Object with `data`, `computed` and `methods` fields as it's only argument,\n\n- `data` is a simple function that returns an object that exposes the context `this`, but you won't be accessible to other computed values or methods.\n\n- `computed` is an Object of functions that take the context as `this`, doing some calculation and returns the result. The computed results should be exposed to the context as the plain return values instead of functions.\n\n- `methods` is an Object of functions that take the context as `this` as well. Methods can access the fields exposed by `data`, `computed` as well as other `methods`. The different between `computed` is that `methods` exposed as functions as-is.\n\nThe type of `SimpleVue`'s return value can be arbitrary.\n\n```ts\nconst instance = SimpleVue({\n  data() {\n    return {\n      firstname: 'Type',\n      lastname: 'Challenges',\n      amount: 10,\n    }\n  },\n  computed: {\n    fullname() {\n      return this.firstname + ' ' + this.lastname\n    }\n  },\n  methods: {\n    hi() {\n      alert(this.fullname.toLowerCase())\n    }\n  }\n})\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/6/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/6/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/213-hard-vue-basic-props/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-213%E3%83%BBVue%20Basic%20Props-de3d37\" alt=\"213・Vue Basic Props\"/></a> <!--info-footer-end-->\n","suffix":"\nimport { Equal, Expect } from '@type-challenges/utils'\n\nSimpleVue({\n  data() {\n    // @ts-expect-error\n    this.firstname\n    // @ts-expect-error\n    this.getRandom()\n    // @ts-expect-error\n    this.data()\n\n    return {\n      firstname: 'Type',\n      lastname: 'Challenges',\n      amount: 10,\n    }\n  },\n  computed: {\n    fullname() {\n      return `${this.firstname} ${this.lastname}`\n    },\n  },\n  methods: {\n    getRandom() {\n      return Math.random()\n    },\n    hi() {\n      alert(this.fullname.toLowerCase())\n      alert(this.getRandom())\n    },\n    test() {\n      const fullname = this.fullname\n      const cases: [\n        Expect<Equal<typeof fullname, string>>,\n      ] = [] as any\n    },\n  },\n})\n","content":"\ndeclare function SimpleVue(options: any): any\n"},{"dir":"610-medium-camelcase","id":"610","challenge":"medium","info":{"difficulty":"medium","title":"CamelCase","tags":"template-literal","author":{"github":"johnsoncodehk","name":"Johnson Chu"}},"prefix":"<!--info-header-start--><h1>CamelCase <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Johnson Chu <a href=\"https://github.com/johnsoncodehk\" target=\"_blank\">@johnsoncodehk</a></p></blockquote><p><a href=\"https://tsch.js.org/610/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\n`for-bar-baz` -> `forBarBaz`\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/610/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/610/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<CamelCase<'foo-bar-baz'>, 'fooBarBaz'>>,\r\n  Expect<Equal<CamelCase<'foo-Bar-Baz'>, 'foo-Bar-Baz'>>,\r\n  Expect<Equal<CamelCase<'foo-bar'>, 'fooBar'>>,\r\n  Expect<Equal<CamelCase<'foo_bar'>, 'foo_bar'>>,\r\n  Expect<Equal<CamelCase<'foo--bar----baz'>, 'foo-Bar---Baz'>>,\r\n  Expect<Equal<CamelCase<'a-b-c'>, 'aBC'>>,\r\n  Expect<Equal<CamelCase<'a-b-c-'>, 'aBC-'>>,\r\n  Expect<Equal<CamelCase<'ABC'>, 'ABC'>>,\r\n  Expect<Equal<CamelCase<'-'>, '-'>>,\r\n  Expect<Equal<CamelCase<''>, ''>>,\r\n  Expect<Equal<CamelCase<'😎'>, '😎'>>,\r\n]\r\n","content":"type CamelCase<S> = any;\n"},{"dir":"612-medium-kebabcase","id":"612","challenge":"medium","info":{"difficulty":"medium","title":"KebabCase","tags":"template-literal","author":{"github":"johnsoncodehk","name":"Johnson Chu"}},"prefix":"<!--info-header-start--><h1>KebabCase <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Johnson Chu <a href=\"https://github.com/johnsoncodehk\" target=\"_blank\">@johnsoncodehk</a></p></blockquote><p><a href=\"https://tsch.js.org/612/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\n`FooBarBaz` -> `for-bar-baz`\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/612/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/612/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<KebabCase<'FooBarBaz'>, 'foo-bar-baz'>>,\r\n  Expect<Equal<KebabCase<'fooBarBaz'>, 'foo-bar-baz'>>,\r\n  Expect<Equal<KebabCase<'foo-bar'>, 'foo-bar'>>,\r\n  Expect<Equal<KebabCase<'foo_bar'>, 'foo_bar'>>,\r\n  Expect<Equal<KebabCase<'Foo-Bar'>, 'foo--bar'>>,\r\n  Expect<Equal<KebabCase<'ABC'>, 'a-b-c'>>,\r\n  Expect<Equal<KebabCase<'-'>, '-'>>,\r\n  Expect<Equal<KebabCase<''>, ''>>,\r\n  Expect<Equal<KebabCase<'😎'>, '😎'>>,\r\n]\n","content":"type KebabCase<S> = any;\n"},{"dir":"62-medium-type-lookup","id":"62","challenge":"medium","info":{"difficulty":"medium","title":"Type Lookup","tags":"union, map","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Type Lookup <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/> <img src=\"https://img.shields.io/badge/-%23map-999\" alt=\"#map\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/62/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\r\n\r\nSometimes, you may want to lookup for a type in a union to by their attributes. \r\n\r\nIn this challenge, we would like to get the corresponding type by searching for the common `type` field in the union `Cat | Dog`. In other words, we will expect to get `Dog` for `LookUp<Dog | Cat, 'dog'>` and `Cat` for `LookUp<Dog | Cat, 'cat'>` in the following example.\r\n\r\n```ts\r\ninterface Cat {\r\n  type: 'cat'\r\n  breeds: 'Abyssinian' | 'Shorthair' | 'Curl' | 'Bengal'\r\n}\r\n\r\ninterface Dog {\r\n  type: 'dog'\r\n  breeds: 'Hound' | 'Brittany' | 'Bulldog' | 'Boxer'\r\n  color: 'brown' | 'white' | 'black'\r\n}\r\n\r\ntype MyDogType = LookUp<Cat | Dog, 'dog'> // expected to be `Dog`\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/62/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/62/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ninterface Cat {\r\n  type: 'cat'\r\n  breeds: 'Abyssinian' | 'Shorthair' | 'Curl' | 'Bengal'\r\n}\r\n\r\ninterface Dog {\r\n  type: 'dog'\r\n  breeds: 'Hound' | 'Brittany' | 'Bulldog' | 'Boxer'\r\n  color: 'brown' | 'white' | 'black'\r\n}\r\n\r\ntype Animal = Cat | Dog\r\n\r\ntype cases = [\r\n  Expect<Equal<LookUp<Animal, 'dog'>, Dog>>,\r\n  Expect<Equal<LookUp<Animal, 'cat'>, Cat>>,\r\n]\n","content":"type LookUp<U, T> = any\n"},{"dir":"645-medium-diff","id":"645","challenge":"medium","info":{"difficulty":"medium","title":"Diff","tags":"object","author":{"github":"ZYSzys","name":"ZYSzys"}},"prefix":"<!--info-header-start--><h1>Diff <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23object-999\" alt=\"#object\"/></h1><blockquote><p>by ZYSzys <a href=\"https://github.com/ZYSzys\" target=\"_blank\">@ZYSzys</a></p></blockquote><p><a href=\"https://tsch.js.org/645/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nGet an `Object` that is the difference between `O` & `O1`\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/645/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/645/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype Foo = {\r\n  name: string\r\n  age: string\r\n}\r\ntype Bar = {\r\n  name: string\r\n  age: string\r\n  gender: number\r\n}\r\n\r\ntype cases = [\r\n  Expect<Equal<Diff<Foo, Bar>, { gender: number }>>\r\n]\n","content":"type Diff<O, O1> = any\r\n"},{"dir":"651-hard-length-of-string-2","id":"651","challenge":"hard","info":{"difficulty":"hard","title":"Length of String 2","tags":"template-literal","related":298,"author":{"github":"uid11","name":null}},"prefix":"<!--info-header-start--><h1>Length of String 2 <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by null <a href=\"https://github.com/uid11\" target=\"_blank\">@uid11</a></p></blockquote><p><a href=\"https://tsch.js.org/651/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement a type `LengthOfString<S>` that calculates the length of the template string (as in [298 - Length of String](https://tsch.js.org/298)):\r\n\r\n```ts\r\ntype T0 = LengthOfString<\"foo\"> // 3\r\n```\r\n\r\nThe type must support strings several hundred characters long (the usual recursive calculation of the string length is limited by the depth of recursive function calls in TS, that is, it supports strings up to about 45 characters long).\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/651/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/651/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/298-medium-length-of-string/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-298%E3%83%BBLength%20of%20String-d9901a\" alt=\"298・Length of String\"/></a> <!--info-footer-end-->","suffix":"import { Equal, IsTrue } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  IsTrue<Equal<LengthOfString<\"\">, 0>>,\r\n  IsTrue<Equal<LengthOfString<\"1\">, 1>>,\r\n  IsTrue<Equal<LengthOfString<\"12\">, 2>>,\r\n  IsTrue<Equal<LengthOfString<\"123\">, 3>>,\r\n  IsTrue<Equal<LengthOfString<\"1234\">, 4>>,\r\n  IsTrue<Equal<LengthOfString<\"12345\">, 5>>,\r\n  IsTrue<Equal<LengthOfString<\"123456\">, 6>>,\r\n  IsTrue<Equal<LengthOfString<\"1234567\">, 7>>,\r\n  IsTrue<Equal<LengthOfString<\"12345678\">, 8>>,\r\n  IsTrue<Equal<LengthOfString<\"123456789\">, 9>>,\r\n  IsTrue<Equal<LengthOfString<\"1234567890\">, 10>>,\r\n  IsTrue<Equal<LengthOfString<\"12345678901\">, 11>>,\r\n  IsTrue<Equal<LengthOfString<\"123456789012\">, 12>>,\r\n  IsTrue<Equal<LengthOfString<\"1234567890123\">, 13>>,\r\n  IsTrue<Equal<LengthOfString<\"12345678901234\">, 14>>,\r\n  IsTrue<Equal<LengthOfString<\"123456789012345\">, 15>>,\r\n  IsTrue<Equal<LengthOfString<\"1234567890123456\">, 16>>,\r\n  IsTrue<Equal<LengthOfString<\"12345678901234567\">, 17>>,\r\n  IsTrue<Equal<LengthOfString<\"123456789012345678\">, 18>>,\r\n  IsTrue<Equal<LengthOfString<\"1234567890123456789\">, 19>>,\r\n  IsTrue<Equal<LengthOfString<\"12345678901234567890\">, 20>>,\r\n  IsTrue<Equal<LengthOfString<\"123456789012345678901\">, 21>>,\r\n  IsTrue<Equal<LengthOfString<\"1234567890123456789012\">, 22>>,\r\n  IsTrue<Equal<LengthOfString<\"12345678901234567890123\">, 23>>,\r\n  IsTrue<Equal<LengthOfString<\"aaaaaaaaaaaaggggggggggggggggggggkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\">, 272>>,\r\n];\n","content":"type LengthOfString<S extends string> = number\n"},{"dir":"697-extreme-tag","id":"697","challenge":"extreme","info":{"difficulty":"extreme","title":"Tag","author":{"github":"uid11","name":null}},"prefix":"<!--info-header-start--><h1>Tag <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> </h1><blockquote><p>by null <a href=\"https://github.com/uid11\" target=\"_blank\">@uid11</a></p></blockquote><p><a href=\"https://tsch.js.org/697/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nDespite the structural typing system in TypeScript, it is sometimes convenient to mark some types with tags, and so that these tags do not interfere with the ability to assign values  of these types to each other.\r\n\r\nFor example, using tags, you can check that some value passes through the calls of the required functions, and in the correct order:\r\n```ts\r\nconst doA = <T extends string>(x: T) => {\r\n  const result = x\r\n\r\n  return result as Tag<typeof result, 'A'>\r\n}\r\n\r\nconst doB = <T extends string>(x: T) => {\r\n  const result = x\r\n\r\n  return result as Tag<typeof result, 'B'>\r\n};\r\n\r\nconst a = doA('foo')\r\nconst b = doB(a)\r\n\r\ntype Check0 = IsTrue<HasTags<typeof b, ['A', 'B']>>\r\n```\r\n\r\nWrite a function `Tag<B, T extends string>` that takes a type `B` other than `null` and `undefined` and returns a type labeled with the string literal type `T`.\r\n\r\nThe labeled types must be mutually assignable with the corresponding original types:\r\n```ts\r\ndeclare let x: string\r\ndeclare let y: Tag<string, 'A'>\r\n\r\nx = y = x\r\n```\r\n\r\nWhen tagging a type already marked with a tag, a new tag must be added to the end of the list of all tags of the type:\r\n```ts\r\ntype T0 = Tag<{ foo: string }, 'A'>\r\ntype T1 = Tag<T0, 'B'>\r\n\r\ntype Check1 = IsTrue<HasExactTags<T1, ['A', 'B']>>\r\n```\r\n\r\nAdd some functions to check for type tags.\r\n\r\n`GetTags<B>` retrieves a list of all tags of a type `B`:\r\n```ts\r\ntype T2 = Tag<number, 'C'>\r\n\r\ntype Check2 = IsTrue<Equal<GetTags<T2>, ['C']>>\r\n```\r\n\r\n`HasTag<B, T extends string>` checks if type `B` is tagged with tag `T` (and returns `true` or `false`):\r\n```ts\r\ntype T3 = Tag<0 | 1, 'D'>\r\n\r\ntype Check3 = IsTrue<HasTag<T3, 'D'>>\r\n```\r\n\r\n`HasTags<B, T extends readonly string[]>` checks if type `B` is tagged in succession with tags from tuple `T`:\r\n```ts\r\ntype T4 = Tag<Tag<Tag<{}, 'A'>, 'B'>, 'C'>\r\n\r\ntype Check4 = IsTrue<HasTags<T4, ['B', 'C']>>\r\n```\r\n\r\n`HasExactTags<B, T extends readonly string[]>` checks if the list of all tags of type `B` is exactly equal to the `T` tuple:\r\n```ts\r\ntype T5 = Tag<Tag<unknown, 'A'>, 'B'>\r\n\r\ntype Check5 = IsTrue<HasExactTags<T5, ['A', 'B']>>\r\n```\r\n\r\nFinally, add type `UnTag<B>`, which removes all tags from type `B`:\r\n```ts\r\ntype T6 = Tag<{ bar: number }, 'A'>\r\ntype T7 = UnTag<T6>\r\n\r\ntype Check6 = IsFalse<HasTag<T7, 'A'>>\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/697/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/697/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { IsTrue, Expect, Equal } from \"@type-challenges/utils\";\r\n\r\n/**\r\n * Tests of assignable of tagged variables.\r\n */\r\ninterface I {\r\n  foo: string;\r\n}\r\n\r\ndeclare let x0: I;\r\ndeclare let x1: Tag<I, \"a\">;\r\ndeclare let x2: Tag<I, \"b\">;\r\ndeclare let x3: Tag<Tag<I, \"a\">, \"b\">;\r\ndeclare let x4: Tag<Tag<I, \"b\">, \"a\">;\r\ndeclare let x5: Tag<Tag<I, \"c\">, \"a\">;\r\ndeclare let x6: Tag<Tag<I, \"c\">, \"b\">;\r\ndeclare let x7: UnTag<Tag<Tag<I, \"c\">, \"b\">>;\r\n\r\nx0 = x1 = x0 = x2 = x0 = x3 = x0 = x4 = x0 = x5 = x0 = x6 = x0 = x7 = x0;\r\nx1 = x2 = x1 = x3 = x1 = x4 = x1 = x5 = x1 = x6 = x1 = x7 = x1;\r\nx2 = x3 = x2 = x4 = x2 = x5 = x2 = x6 = x2 = x6 = x2;\r\nx3 = x4 = x4 = x5 = x3 = x6 = x3 = x7 = x3;\r\nx4 = x5 = x5 = x6 = x4 = x7 = x4;\r\nx5 = x6 = x5 = x7 = x5;\r\nx6 = x7 = x6;\r\n\r\ndeclare let y0: string;\r\ndeclare let y1: Tag<string, \"a\">;\r\ndeclare let y2: Tag<string, \"b\">;\r\ndeclare let y3: Tag<Tag<string, \"a\">, \"b\">;\r\ndeclare let y4: Tag<Tag<string, \"b\">, \"a\">;\r\ndeclare let y5: Tag<Tag<string, \"c\">, \"a\">;\r\ndeclare let y6: Tag<Tag<string, \"c\">, \"b\">;\r\ndeclare let y7: UnTag<Tag<Tag<string, \"c\">, \"b\">>;\r\n\r\ny0 = y1 = y0 = y2 = y0 = y3 = y0 = y4 = y0 = y5 = y0 = y6 = y0 = y7 = y0;\r\ny1 = y2 = y1 = y3 = y1 = y4 = y1 = y5 = y1 = y6 = y1 = y7 = y1;\r\ny2 = y3 = y2 = y4 = y2 = y5 = y2 = y6 = y2 = y7 = y2;\r\ny3 = y4 = y4 = y5 = y3 = y6 = y3 = y7 = y3;\r\ny4 = y5 = y5 = y6 = y4 = y7 = y4;\r\ny5 = y6 = y5 = y7 = y5;\r\ny6 = y7 = y6;\r\n\r\n// @ts-expect-error\r\nx0 = y0;\r\n// @ts-expect-error\r\nx1 = y1;\r\n// @ts-expect-error\r\nx2 = y2;\r\n// @ts-expect-error\r\nx3 = y3;\r\n// @ts-expect-error\r\nx4 = y4;\r\n// @ts-expect-error\r\nx5 = y5;\r\n// @ts-expect-error\r\nx6 = y6;\r\n// @ts-expect-error\r\nx7 = y7;\r\n\r\ndeclare const UNIQUE_SYMBOL: unique symbol;\r\ntype US = typeof UNIQUE_SYMBOL;\r\n\r\n/**\r\n * Tests of API (Tag, GetTags, Untag, HasTag, HasTags, HasExactTags).\r\n */\r\ntype cases = [\r\n  /**\r\n   * Tag.\r\n   */\r\n  IsTrue<Equal<Tag<null, \"foo\">, null>>,\r\n  IsTrue<Equal<Tag<undefined, \"foo\">, undefined>>,\r\n  IsTrue<Equal<\"x\", keyof Tag<{ x: 0 }, \"foo\"> & string>>,\r\n\r\n  /**\r\n   * GetTags.\r\n   */\r\n  IsTrue<Equal<GetTags<null>, []>>,\r\n  IsTrue<Equal<GetTags<any>, []>>,\r\n  IsTrue<Equal<GetTags<undefined>, []>>,\r\n  IsTrue<Equal<GetTags<Tag<any, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<null | 1, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<0, \"foo\"> | 1>, []>>,\r\n  IsTrue<Equal<GetTags<Tag<{}, \"foo\"> | Tag<1, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<string, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<never, \"foo\">>, [\"foo\"]>>,\r\n  IsTrue<Equal<GetTags<Tag<Tag<string, \"foo\">, \"bar\">>, [\"foo\", \"bar\"]>>,\r\n  IsTrue<\r\n    Equal<\r\n      GetTags<Tag<Tag<Tag<{}, \"foo\">, \"bar\">, \"baz\">>,\r\n      [\"foo\", \"bar\", \"baz\"]\r\n    >\r\n  >,\r\n\r\n  /**\r\n   * UnTag.\r\n   */\r\n  IsTrue<Equal<UnTag<null>, null>>,\r\n  IsTrue<Equal<UnTag<undefined>, undefined>>,\r\n  IsTrue<Equal<UnTag<Tag<{}, \"foo\">>, {}>>,\r\n  IsTrue<Equal<UnTag<Tag<Tag<{ x: 0 }, \"foo\">, \"bar\">>, { x: 0 }>>,\r\n  IsTrue<Equal<keyof UnTag<Tag<Tag<number, \"foo\">, \"bar\">>, keyof number>>,\r\n\r\n  /**\r\n   * HasTag.\r\n   */\r\n  Expect<Equal<HasTag<null, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<undefined, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<any, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<1, \"foo\"> | {}, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<{}, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<0, \"foo\"> | Tag<1, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<0, \"foo\"> | Tag<1, \"bar\">, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<Tag<{}, \"foo\">, \"bar\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<Tag<symbol, \"bar\">, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<Tag<{}, \"bar\">, \"baz\">, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<true, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<null, \"foo\">, \"foo\">, false>>,\r\n  Expect<Equal<HasTag<Tag<Tag<undefined, \"foo\">, \"bar\">, \"bar\">, false>>,\r\n  Expect<Equal<HasTag<Tag<Tag<false, \"foo\">, \"bar\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<Tag<never, \"bar\">, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<{}, \"foo\">, \"foo\">, true>>,\r\n  Expect<Equal<HasTag<Tag<{}, \"foo\">, \"bar\">, false>>,\r\n  Expect<Equal<HasTag<{}, \"foo\">, false>>,\r\n\r\n  /**\r\n   * HasTags.\r\n   */\r\n  Expect<Equal<HasTags<null, [\"foo\"]>, false>>,\r\n  Expect<Equal<HasTags<undefined, [\"foo\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<any, \"bar\">, [\"foo\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<{}, \"bar\">, [\"foo\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<{}, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<any, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<{} | undefined, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<string, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<3n, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<{}, \"bar\">, \"foo\">, [\"foo\", \"bar\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<{}, \"baz\">, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<symbol, \"baz\">, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<{}, \"foo\">, \"bar\">, \"baz\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<0, \"foo\">, \"bar\">, \"baz\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasTags<Tag<Tag<Tag<{}, \"foo\">, \"baz\">, \"bar\">, [\"foo\", \"bar\"]>, false>>,\r\n  Expect<Equal<HasTags<Tag<Tag<unknown, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n\r\n  /**\r\n   * HasExactTags.\r\n   */\r\n  Expect<Equal<HasExactTags<0, []>, true>>,\r\n  Expect<Equal<HasExactTags<null, []>, true>>,\r\n  Expect<Equal<HasExactTags<undefined, []>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<number, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<any, \"foo\">, [\"bar\"]>, false>>,\r\n  Expect<Equal<HasExactTags<Tag<Tag<any, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<\"\", \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<US, \"foo\">, [\"foo\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<{}, \"foo\">, [\"bar\"]>, false>>,\r\n  Expect<Equal<HasExactTags<Tag<Tag<Tag<{}, \"foo\">, \"bar\">, \"baz\">, [\"foo\", \"bar\"]>, false>>,\r\n  Expect<Equal<HasExactTags<Tag<Tag<Tag<{}, \"foo\">, \"bar\">, \"baz\">, [\"foo\", \"bar\", \"baz\"]>, true>>,\r\n  Expect<Equal<HasExactTags<Tag<Tag<void, \"foo\">, \"bar\">, [\"foo\", \"bar\"]>, true>>,\r\n];\r\n","content":"type GetTags<B> = any\r\n\r\ntype Tag<B, T extends string> = any\r\n\r\ntype UnTag<B> = any\r\n\r\ntype HasTag<B, T extends string> = any\r\ntype HasTags<B, T extends readonly string[]> = any\r\ntype HasExactTags<B, T extends readonly string[]> = any\n"},{"dir":"7-easy-readonly","id":"7","challenge":"easy","info":{"title":"Readonly","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"built-in, readonly, object-keys","related":"8, 9"},"prefix":"<!--info-header-start--><h1>Readonly <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23built--in-999\" alt=\"#built-in\"/> <img src=\"https://img.shields.io/badge/-%23readonly-999\" alt=\"#readonly\"/> <img src=\"https://img.shields.io/badge/-%23object--keys-999\" alt=\"#object-keys\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/7/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\n\nImplement the built-in `Readonly<T>` generic without using it.\n\nConstructs a type with all properties of T set to readonly, meaning the properties of the constructed type cannot be reassigned.\n\nFor example\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n}\n\nconst todo: MyReadonly<Todo> = {\n  title: \"Hey\",\n  description: \"foobar\"\n}\n\ntodo.title = \"Hello\" // Error: cannot reassign a readonly property\ntodo.description = \"barFoo\" // Error: cannot reassign a readonly property\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/7/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/7/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/8-medium-readonly-2/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-8%E3%83%BBReadonly%202-d9901a\" alt=\"8・Readonly 2\"/></a>  <a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/9-medium-deep-readonly/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-9%E3%83%BBDeep%20Readonly-d9901a\" alt=\"9・Deep Readonly\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<MyReadonly<Todo1>, Readonly<Todo1>>>,\n]\n\ninterface Todo1 {\n  title: string\n  description: string\n  completed: boolean\n}\n","content":"type MyReadonly<T> = any\n"},{"dir":"730-hard-union-to-tuple","id":"730","challenge":"hard","info":{"difficulty":"hard","title":"Union to Tuple","tags":"union, tuple, infer","related":55,"author":{"github":"suica","name":"Sg"}},"prefix":"<!--info-header-start--><h1>Union to Tuple <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/> <img src=\"https://img.shields.io/badge/-%23tuple-999\" alt=\"#tuple\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/></h1><blockquote><p>by Sg <a href=\"https://github.com/suica\" target=\"_blank\">@suica</a></p></blockquote><p><a href=\"https://tsch.js.org/730/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type, `UnionToTuple`, that converts a union to a tuple.\r\n\r\nAs we know, union is an unordered structure, but tuple is an ordered, which implies that we are not supposed to preassume any order will be preserved between terms of one union, when unions are created or transformed. \r\n\r\nHence in this challenge, **any permutation of the elements in the output tuple is acceptable**.\r\n\r\nYour type should resolve to one of the following two types, but ***NOT*** a union of them!\r\n```ts\r\nUnionToTuple<1>           // [1], and correct\r\nUnionToTuple<'any' | 'a'> // ['any','a'], and correct\r\n```\r\nor \r\n```ts\r\nUnionToTuple<'any' | 'a'> // ['a','any'], and correct\r\n```\r\nIt shouldn't be a union of all acceptable tuples...\r\n```ts\r\nUnionToTuple<'any' | 'a'> // ['a','any'] | ['any','a'], which is incorrect\r\n```\r\n\r\n\r\nAnd a union could collapes, which means some types could absorb (or be absorbed by) others and there is no way to prevent this absorption. See the following examples:\r\n```ts\r\nEqual<UnionToTuple<any | 'a'>,       UnionToTuple<any>>         // will always be a true\r\nEqual<UnionToTuple<unknown | 'a'>,   UnionToTuple<unknown>>     // will always be a true\r\nEqual<UnionToTuple<never | 'a'>,     UnionToTuple<'a'>>         // will always be a true\r\nEqual<UnionToTuple<'a' | 'a' | 'a'>, UnionToTuple<'a'>>         // will always be a true\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/730/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/730/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/55-hard-union-to-intersection/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-55%E3%83%BBUnion%20to%20Intersection-de3d37\" alt=\"55・Union to Intersection\"/></a> <!--info-footer-end-->","suffix":"import {Equal, Expect} from '@type-challenges/utils'\r\n\r\ntype ExtractValuesOfTuple<T extends any[]> = T[keyof T & number]\r\n\r\ntype cases = [\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'a' | 'b'>>, 'a' | 'b'>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'a'>>, 'a'>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<any>>, any>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<undefined | void | 1>>, void | 1>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<any | 1>>, any | 1>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<any | 1>>, any>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'d' | 'f' | 1 | never>>, 'f' | 'd' | 1>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<[{ a: 1 }] | 1>>, [{ a: 1 }] | 1>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<never>>, never>>,\r\n    Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'a' | 'b' | 'c' | 1 | 2 | 'd' | 'e' | 'f' | 'g'>>, 'f' | 'e' | 1 | 2 | 'g' | 'c' | 'd' | 'a' | 'b'>>,\r\n]\n","content":"type UnionToTuple<T> = any\n"},{"dir":"734-extreme-inclusive-range","id":"734","challenge":"extreme","info":{"difficulty":"extreme","title":"Inclusive Range","tags":"infer, array","author":{"github":"suica","name":"Sg"}},"prefix":"<!--info-header-start--><h1>Inclusive Range <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Sg <a href=\"https://github.com/suica\" target=\"_blank\">@suica</a></p></blockquote><p><a href=\"https://tsch.js.org/734/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nRecursion depth in type system is one of the limitations of TypeScript, the number is around 45. \r\n\r\n*We need to go deeper*. And we could go deeper.\r\n\r\nIn this challenge, you are given one lower boundary and one higher boundary, by which a range of natural numbers is inclusively sliced. You should develop a technique that enables you to do recursion deeper than the limitation, since both boundary vary from 0 to 200. \r\n\r\nNote that when `Lower > Higher`, output an empty tuple.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/734/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/734/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<InclusiveRange<200, 1>, []>>,\r\n  Expect<Equal<InclusiveRange<10, 5>, []>>,\r\n  Expect<Equal<InclusiveRange<5, 5>, [5]>>,\r\n  Expect<Equal<InclusiveRange<0, 10>, [0,1,2,3,4,5,6,7,8,9,10]>>,\r\n  Expect<Equal<InclusiveRange<1, 200>, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]>>,\r\n  Expect<Equal<InclusiveRange<22,146>,[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]>>\r\n]\n","content":"type InclusiveRange<Lower extends number,Higher extends number> = any\n"},{"dir":"741-extreme-sort","id":"741","challenge":"extreme","info":{"difficulty":"extreme","title":"Sort","tags":"infer, array","author":{"github":"suica","name":"Sg"}},"prefix":"<!--info-header-start--><h1>Sort <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23infer-999\" alt=\"#infer\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by Sg <a href=\"https://github.com/suica\" target=\"_blank\">@suica</a></p></blockquote><p><a href=\"https://tsch.js.org/741/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nIn this challenge, you are required to sort natural number arrays in either ascend order or descent order.\r\n\r\nAscend order examples:\r\n```ts\r\nSort<[]> // []\r\nSort<[1]> // [1]\r\nSort<[2, 4, 7, 6, 6, 6, 5, 8, 9]> //  [2, 4, 5, 6, 6, 6, 7, 8, 9]\r\n```\r\n\r\nThe `Sort` type should also accept a boolean type. When it is `true`, the sorted result should be in descent order. Some examples:\r\n\r\n```ts\r\nSort<[3, 2, 1], true> // [3, 2, 1]\r\nSort<[3, 2, 0, 1, 0, 0, 0], true> // [3, 2, 1, 0, 0, 0, 0]\r\n```\r\n\r\nExtra challenges:\r\n1. Support natural numbers with 15+ digits.\r\n2. Support float numbers.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/741/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/741/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    Expect<Equal<Sort<[]>, []>>,\r\n    Expect<Equal<Sort<[1]>, [1]>>,\r\n    Expect<Equal<Sort<[2, 1]>, [1, 2]>>,\r\n    Expect<Equal<Sort<[0, 0, 0]>, [0, 0, 0]>>,\r\n    Expect<Equal<Sort<[1, 2, 3]>, [1, 2, 3]>>,\r\n    Expect<Equal<Sort<[3, 2, 1]>, [1, 2, 3]>>,\r\n    Expect<Equal<Sort<[3, 2, 1, 2]>, [1, 2, 2, 3]>>,\r\n    Expect<Equal<Sort<[3, 2, 0, 1, 0, 0, 0]>, [0, 0, 0, 0, 1, 2, 3]>>,\r\n    Expect<Equal<Sort<[2, 4, 7, 6, 6, 6, 5, 8, 9]>, [2, 4, 5, 6, 6, 6, 7, 8, 9]>>,\r\n    Expect<Equal<Sort<[1, 1, 2, 1, 1, 1, 1, 1, 1]>, [1, 1, 1, 1, 1, 1, 1, 1, 2]>>,\r\n    Expect<Equal<Sort<[], true>, []>>,\r\n    Expect<Equal<Sort<[1], true>, [1]>>,\r\n    Expect<Equal<Sort<[2, 1], true>, [2, 1]>>,\r\n    Expect<Equal<Sort<[0, 0, 0], true>, [0, 0, 0]>>,\r\n    Expect<Equal<Sort<[1, 2, 3], true>, [3, 2, 1]>>,\r\n    Expect<Equal<Sort<[3, 2, 1], true>, [3, 2, 1]>>,\r\n    Expect<Equal<Sort<[3, 2, 1, 2], true>, [3, 2, 2, 1]>>,\r\n    Expect<Equal<Sort<[3, 2, 0, 1, 0, 0, 0], true>, [3, 2, 1, 0, 0, 0, 0]>>,\r\n    Expect<Equal<Sort<[2, 4, 7, 6, 6, 6, 5, 8, 9], true>, [9, 8, 7, 6, 6, 6, 5, 4, 2]>>\r\n]\n","content":"type Sort = any\n"},{"dir":"8-medium-readonly-2","id":"8","challenge":"medium","info":{"title":"Readonly 2","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"readonly, object-keys","related":"7, 9"},"prefix":"<!--info-header-start--><h1>Readonly 2 <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23readonly-999\" alt=\"#readonly\"/> <img src=\"https://img.shields.io/badge/-%23object--keys-999\" alt=\"#object-keys\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/8/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement a generic `MyReadonly2<T, K>` which takes two type argument `T` and `K`.\n\n`K` specify the set of properties of `T` that should set to Readonly. When `K` is not provided, it should make all properties readonly just like the normal `Readonly<T>`.\n\nFor example\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\nconst todo: MyReadonly2<Todo, 'title' | 'description'> = {\n  title: \"Hey\",\n  description: \"foobar\",\n  completed: false,\n}\n\ntodo.title = \"Hello\" // Error: cannot reassign a readonly property\ntodo.description = \"barFoo\" // Error: cannot reassign a readonly property\ntodo.completed = true // OK\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/8/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/8/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/7-easy-readonly/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-7%E3%83%BBReadonly-7aad0c\" alt=\"7・Readonly\"/></a>  <a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/9-medium-deep-readonly/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-9%E3%83%BBDeep%20Readonly-d9901a\" alt=\"9・Deep Readonly\"/></a> <!--info-footer-end-->","suffix":"import { Alike, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Alike<MyReadonly2<Todo1>, Readonly<Todo1>>>,\n  Expect<Alike<MyReadonly2<Todo1, 'title' | 'description'>, Expected>>,\n  Expect<Alike<MyReadonly2<Todo2, 'title' | 'description'>, Expected>>,\n]\n\ninterface Todo1 {\n  title: string\n  description?: string\n  completed: boolean\n}\n\ninterface Todo2 {\n  readonly title: string\n  description?: string\n  completed: boolean\n}\n\ninterface Expected {\n  readonly title: string\n  readonly description?: string\n  completed: boolean\n}\n","content":"type MyReadonly2<T, K> = any\n"},{"dir":"847-hard-string-join","id":"847","challenge":"hard","info":{"difficulty":"hard","title":"String Join","author":{"github":"tl-matt-davis","name":"Matt Davis"}},"prefix":"<!--info-header-start--><h1>String Join <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> </h1><blockquote><p>by Matt Davis <a href=\"https://github.com/tl-matt-davis\" target=\"_blank\">@tl-matt-davis</a></p></blockquote><p><a href=\"https://tsch.js.org/847/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nCreate a type-safe string join utility which can be used like so:\r\n\r\n```ts\r\nconst hyphenJoiner = join('-')\r\nconst result = hyphenJoiner('a', 'b', 'c'); // = 'a-b-c'\r\n```\r\n\r\nOr alternatively:\r\n```ts\r\njoin('#')('a', 'b', 'c') // = 'a#b#c'\r\n```\r\n\r\nWhen we pass an empty delimiter (i.e '') to join, we should concat the strings as they are, i.e: \r\n```ts\r\njoin('')('a', 'b', 'c') // = 'abc'\r\n```\r\n\r\nWhen only one item is passed, we should get back the original item (without any delimiter added):\r\n```ts\r\njoin('-')('a') // = 'a'\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/847/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/847/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\n// Edge cases\r\nconst noCharsOutput = join('-')();\r\nconst oneCharOutput = join('-')('a');\r\nconst noDelimiterOutput = join('')('a', 'b', 'c');\r\n\r\n// Regular cases\r\nconst hyphenOutput = join('-')('a', 'b', 'c');\r\nconst hashOutput = join('#')('a', 'b', 'c');\r\nconst twoCharOutput = join('-')('a', 'b');\r\nconst longOutput = join('-')('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h');\r\n\r\ntype cases = [\r\n    Expect<Equal<typeof noCharsOutput, ''>>,\r\n    Expect<Equal<typeof oneCharOutput, 'a'>>,\r\n    Expect<Equal<typeof noDelimiterOutput, 'abc'>>,\r\n    Expect<Equal<typeof twoCharOutput, 'a-b'>>,\r\n    Expect<Equal<typeof hyphenOutput, 'a-b-c'>>,\r\n    Expect<Equal<typeof hashOutput, 'a#b#c'>>,\r\n    Expect<Equal<typeof longOutput, 'a-b-c-d-e-f-g-h'>>,\r\n]\n","content":"declare function join(delimiter: any): (...parts: any[]) => any;\n"},{"dir":"869-extreme-distributeunions","id":"869","challenge":"extreme","info":{"difficulty":"extreme","title":"DistributeUnions","author":{"github":"gvergnaud","name":"Gabriel Vergnaud"}},"prefix":"<!--info-header-start--><h1>DistributeUnions <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> </h1><blockquote><p>by Gabriel Vergnaud <a href=\"https://github.com/gvergnaud\" target=\"_blank\">@gvergnaud</a></p></blockquote><p><a href=\"https://tsch.js.org/869/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type `Distribute Unions`, that turns a type of data structure containing union types into a union of\r\nall possible types of permitted data structures that don't contain any union. The data structure can be any\r\ncombination of objects and tuples on any level of nesting.\r\n\r\nFor example:\r\n\r\n```ts\r\ntype T1 = DistributeUnions<[1 | 2, 'a' | 'b']>\r\n// =>   [1, 'a'] | [2, 'a'] | [1, 'b'] | [2, 'b']\r\n\r\ntype T2 = DistributeUnions<{ type: 'a', value: number | string } | { type: 'b', value: boolean }>\r\n//  =>  | { type 'a', value: number }\r\n//      | { type 'a', value: string }\r\n//      | { type 'b', value: boolean }\r\n\r\ntype T3 = DistributeUnions<[{ value: 'a' | 'b' },  { x: { y: 2 | 3  } }] | 17>\r\n//  =>  | [{ value: 'a' },  { x: { y: 2  } }]\r\n//      | [{ value: 'a' },  { x: { y: 3  } }]\r\n//      | [{ value: 'b' },  { x: { y: 2  } }]\r\n//      | [{ value: 'b' },  { x: { y: 3  } }]\r\n//      | 17\r\n```\r\n\r\nFor context, this type can be very useful if you want to exclude a case on deep data structures:\r\n\r\n```ts\r\ntype ExcludeDeep<A, B> = Exclude<DistributeUnions<A>, B>\r\n\r\ntype T0 = ExcludeDeep<[{ value: 'a' | 'b' },  { x: { y: 2 | 3  } }] | 17, [{ value: 'a' },  any]>\r\n//  =>  | [{ value: 'b' },  { x: { y: 2  } }]\r\n//      | [{ value: 'b' },  { x: { y: 3  } }]\r\n//      | 17\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/869/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/869/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    // Already distributed unions should stay the same:\r\n    Expect<Equal<DistributeUnions<1>, 1>>,\r\n    Expect<Equal<DistributeUnions<string>, string>>,\r\n    Expect<Equal<DistributeUnions<1 | 2>, 1 | 2>>,\r\n    Expect<Equal<DistributeUnions<'b' | { type: 'a' } | [1]>, 'b' | { type: 'a' } | [1]>>,\r\n    // tuples:\r\n    Expect<Equal<DistributeUnions<[1 | 2, 3]>, [1, 3] | [2, 3]>>,\r\n    Expect<Equal<DistributeUnions<[1 | 2, 'a' | 'b']>, [1, 'a'] | [1, 'b'] | [2, 'a'] | [2, 'b']>>,\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<[1 | 2, 'a' | 'b', false | true]>,\r\n            | [1, 'a', false]\r\n            | [1, 'a', true]\r\n            | [1, 'b', false]\r\n            | [1, 'b', true]\r\n            | [2, 'a', false]\r\n            | [2, 'a', true]\r\n            | [2, 'b', false]\r\n            | [2, 'b', true]\r\n        >\r\n    >,\r\n    // objects\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<{ x: 'a' | 'b'; y: 'c' | 'd' }>,\r\n            { x: 'a'; y: 'c' } | { x: 'a'; y: 'd' } | { x: 'b'; y: 'c' } | { x: 'b'; y: 'd' }\r\n        >\r\n    >,\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<{ type: 'a'; value: number | string } | { type: 'b'; value: boolean }>,\r\n            | { type: 'a'; value: string }\r\n            | { type: 'a'; value: number }\r\n            | { type: 'b'; value: false }\r\n            | { type: 'b'; value: true }\r\n        >\r\n    >,\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<\r\n                | {\r\n                      type: 'a';\r\n                      option: { kind: 'none' } | { kind: 'some'; value: 'x' | 'y' };\r\n                  }\r\n                | { type: 'b'; msg: string }\r\n            >,\r\n            | { type: 'b'; msg: string }\r\n            | { type: 'a'; option: { kind: 'none' } }\r\n            | { type: 'a'; option: { kind: 'some'; value: 'x' } }\r\n            | { type: 'a'; option: { kind: 'some'; value: 'y' } }\r\n        >\r\n    >,\r\n    // mixed structures:\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<[false | true, { value: 'a' | 'b' }, { x: { y: 2 | 3 } }]>,\r\n            | [false, { value: 'a' }, { x: { y: 2 } }]\r\n            | [false, { value: 'a' }, { x: { y: 3 } }]\r\n            | [false, { value: 'b' }, { x: { y: 2 } }]\r\n            | [false, { value: 'b' }, { x: { y: 3 } }]\r\n            | [true, { value: 'a' }, { x: { y: 2 } }]\r\n            | [true, { value: 'a' }, { x: { y: 3 } }]\r\n            | [true, { value: 'b' }, { x: { y: 2 } }]\r\n            | [true, { value: 'b' }, { x: { y: 3 } }]\r\n        >\r\n    >,\r\n    Expect<\r\n        Equal<\r\n            DistributeUnions<17 | [10 | { value: 'a' | 'b' }, { x: { y: 2 | 3 } }]>,\r\n            | 17\r\n            | [10, { x: { y: 2 } }]\r\n            | [10, { x: { y: 3 } }]\r\n            | [{ value: 'a' }, { x: { y: 2 } }]\r\n            | [{ value: 'a' }, { x: { y: 3 } }]\r\n            | [{ value: 'b' }, { x: { y: 2 } }]\r\n            | [{ value: 'b' }, { x: { y: 3 } }]\r\n        >\r\n    >,\r\n];\r\n","content":"type DistributeUnions<T> = any\n"},{"dir":"89-hard-required-keys","id":"89","challenge":"hard","info":{"difficulty":"hard","title":"Required Keys","tags":"utils","related":5,"author":{"github":"yi-tuan","name":"yituan"}},"prefix":"<!--info-header-start--><h1>Required Keys <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/></h1><blockquote><p>by yituan <a href=\"https://github.com/yi-tuan\" target=\"_blank\">@yi-tuan</a></p></blockquote><p><a href=\"https://tsch.js.org/89/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the advanced util type `RequiredKeys<T>`, which picks all the required keys into a union.\r\n\r\nFor example\r\n\r\n```ts\r\ntype Result = RequiredKeys<{ foo: number; bar?: string }>;\r\n// expected to be “foo”\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/89/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/89/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/5-extreme-readonly-keys/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-5%E3%83%BBGet%20Readonly%20Keys-b11b8d\" alt=\"5・Get Readonly Keys\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    Expect<Equal<RequiredKeys<{ a: number, b?: string }>, \"a\">>,\r\n    Expect<Equal<RequiredKeys<{ a: undefined, b?: undefined }>, \"a\">>,\r\n    Expect<Equal<RequiredKeys<{ a: undefined, b?: undefined, c: string, d: null }>, \"a\" | \"c\" | \"d\">>,\r\n    Expect<Equal<RequiredKeys<{}>, never>>\r\n]\n","content":"type RequiredKeys<T> = any\n"},{"dir":"898-easy-includes","id":"898","challenge":"easy","info":{"difficulty":"easy","title":"Includes","tags":"array","author":{"github":"kynefuk","name":null}},"prefix":"<!--info-header-start--><h1>Includes <img src=\"https://img.shields.io/badge/-easy-7aad0c\" alt=\"easy\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by null <a href=\"https://github.com/kynefuk\" target=\"_blank\">@kynefuk</a></p></blockquote><p><a href=\"https://tsch.js.org/898/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement the JavaScript `Array.includes` function in the type system. A type takes the two arguments. The output should be a boolean `true` or `false`.\r\n\nFor example\r\n\n```ts\r\ntype isPillarMen = Includes<['Kars', 'Esidisi', 'Wamuu', 'Santana'], 'Dio'> // expected to be `false`\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/898/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/898/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Includes<['Kars', 'Esidisi', 'Wamuu', 'Santana'], 'Kars'>, true>>,\r\n  Expect<Equal<Includes<['Kars','Esidisi','Wamuu', 'Santana'], 'Dio'>, false>>,\r\n  Expect<Equal<Includes<[1, 2, 3, 5, 6, 7], 4>, false>>,\r\n]\n","content":"type Includes<T extends readonly any[], U> = any;\n"},{"dir":"9-medium-deep-readonly","id":"9","challenge":"medium","info":{"title":"Deep Readonly","author":{"name":"Anthony Fu","email":"hi@antfu.me","github":"antfu"},"tags":"readonly, object-keys, deep","related":"7, 8"},"prefix":"<!--info-header-start--><h1>Deep Readonly <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23readonly-999\" alt=\"#readonly\"/> <img src=\"https://img.shields.io/badge/-%23object--keys-999\" alt=\"#object-keys\"/> <img src=\"https://img.shields.io/badge/-%23deep-999\" alt=\"#deep\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/9/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement a generic `DeepReadonly<T>` which make every parameter of an object - and its sub-objects recursively - readonly.\n\nYou can assume that we are only dealing with Objects in this challenge. Arrays, Functions, Classes and so on are no need to take into consideration. However, you can still challenge your self by covering different cases as many as possbile.\n\nFor example\n\n```ts\ntype X = { \n  x: { \n    a: 1\n    b: 'hi'\n  }\n  y: 'hey'\n}\n\ntype Expected = { \n  readonly x: { \n    readonly a: 1\n    readonly b: 'hi'\n  }\n  readonly y: 'hey' \n}\n\nconst todo: DeepReadonly<X> // should be same as `Expected`\n```\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/9/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/9/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/7-easy-readonly/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-7%E3%83%BBReadonly-7aad0c\" alt=\"7・Readonly\"/></a>  <a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/8-medium-readonly-2/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-8%E3%83%BBReadonly%202-d9901a\" alt=\"8・Readonly 2\"/></a> <!--info-footer-end-->\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<DeepReadonly<X>, Expected>>,\n]\n\ntype X = {\n  a: () => 22\n  b: string\n  c: {\n    d: boolean\n    e: {\n      g: {\n        h: {\n          i: true\n          j: 'string'\n        }\n        k: 'hello'\n      }\n    }\n  }\n}\n\ntype Expected = {\n  readonly a: () => 22\n  readonly b: string\n  readonly c: {\n    readonly d: boolean\n    readonly e: {\n      readonly g: {\n        readonly h: {\n          readonly i: true\n          readonly j: 'string'\n        }\n        readonly k: 'hello'\n      }\n    }\n  }\n}\n","content":"type DeepReadonly<T> = any\n"},{"dir":"90-hard-optional-keys","id":"90","challenge":"hard","info":{"difficulty":"hard","title":"Optional Keys","tags":"utils","related":"89, 5","author":{"github":"yi-tuan","name":"yituan"}},"prefix":"<!--info-header-start--><h1>Optional Keys <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/></h1><blockquote><p>by yituan <a href=\"https://github.com/yi-tuan\" target=\"_blank\">@yi-tuan</a></p></blockquote><p><a href=\"https://tsch.js.org/90/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nImplement the advanced util type `OptionalKeys<T>`, which picks all the optional keys into a union.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/90/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/90/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <hr><h3>Related Challenges</h3><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/89-hard-required-keys/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-89%E3%83%BBRequired%20Keys-de3d37\" alt=\"89・Required Keys\"/></a>  <a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/5-extreme-readonly-keys/README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-5%E3%83%BBGet%20Readonly%20Keys-b11b8d\" alt=\"5・Get Readonly Keys\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n    Expect<Equal<OptionalKeys<{ a: number, b?: string }>, \"b\">>,\r\n    Expect<Equal<OptionalKeys<{ a: undefined, b?: undefined }>, \"b\">>,\r\n    Expect<Equal<OptionalKeys<{ a: undefined, b?: undefined, c?: string, d?: null }>, \"b\" | \"c\" | \"d\">>,\r\n    Expect<Equal<OptionalKeys<{}>, never>>\r\n]\n","content":"type OptionalKeys<T> = any\n"},{"dir":"925-extreme-assert-array-index","id":"925","challenge":"extreme","info":{"difficulty":"extreme","title":"Assert Array Index","tags":"array","tsconfig":{"noUncheckedIndexedAccess":true},"author":{"github":"uid11","name":null}},"prefix":"<!--info-header-start--><h1>Assert Array Index <img src=\"https://img.shields.io/badge/-extreme-b11b8d\" alt=\"extreme\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by null <a href=\"https://github.com/uid11\" target=\"_blank\">@uid11</a></p></blockquote><p><a href=\"https://tsch.js.org/925/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\r\n\r\nSometimes we want to use the good old `for`-loop with an index to traverse the array, but in this case TypeScript does not check in any way that we are accessing the elements of the array at its real index (not exceeding the length of the array), and that we are not using an arbitrary number as an index, or index from another array (for nested loops, for traversing matrices or graphs):\r\n```ts\r\nconst matrix = [\r\n    [3, 4],\r\n    [5, 6],\r\n    [7, 8],\r\n];\r\n\r\n// This example contains no type errors when the noUncheckedIndexedAccess option is off.\r\nfor (let i = 0; i < matrix.length; i += 1) {\r\n    const columns: number[] = matrix[i];\r\n\r\n    for (let j = 0; j < columns.length; j += 1) {\r\n        const current: number = columns[i]; // oops! i instead of j\r\n\r\n        console.log(\r\n            current.toFixed(), // TypeError: Cannot read property 'toFixed' of undefined\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nYou can enable the [noUncheckedIndexedAccess](https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess) option (in `tsconfig.json`), but then each time you access an array element, you will need to check that this element exists, which is somewhat verbose and inconvenient, especially since in the case of such a `for`-traversal, we are sure that the index does not exceed the length of the array:\r\n```ts\r\nconst numbers = [5, 7];\r\n\r\nfor (let i = 0; i < numbers.length; i += 1) {\r\n    const current = numbers[i];\r\n\r\n    if (current !== undefined) {\r\n        console.log(current.toFixed());\r\n    }\r\n}\r\n```\r\n\r\nWrite an `assert`-function `assertArrayIndex(array, key)` that can be applied to any `array` (with an arbitrary unique string `key`, which is needed to distinguish arrays at the type level) to allow access to the elements of this array only by the index obtained from array by the special generic type `Index<typeof array>` (this functionality requires enabling the [noUncheckedIndexedAccess](https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess) option in `tsconfig.json`):\r\n```ts\r\nconst numbers = [5, 7];\r\n\r\nassertArrayIndex(numbers, 'numbers');\r\n\r\nfor (let i = 0 as Index<typeof numbers>; i < numbers.length; i += 1) {\r\n    console.log(numbers[i].toFixed());\r\n}\r\n```\r\n\r\nWhen accessing by such an index, it must be guaranteed that an element in the array exists, and when accessing an array by any other indices, there is no such guarantee (the element may not exist):\r\n```ts\r\nconst matrix = [\r\n    [3, 4],\r\n    [5, 6],\r\n    [7, 8],\r\n];\r\n\r\nassertArrayIndex(matrix, 'rows');\r\n\r\nlet sum = 0;\r\n\r\nfor (let i = 0 as Index<typeof matrix>; i < matrix.length; i += 1) {\r\n    const columns: number[] = matrix[i];\r\n\r\n    // @ts-expect-error: number | undefined in not assignable to number\r\n    const x: number[] = matrix[0];\r\n\r\n    assertArrayIndex(columns, 'columns');\r\n\r\n    for (let j = 0 as Index<typeof columns>; j < columns.length; j += 1) {\r\n        sum += columns[j];\r\n\r\n        // @ts-expect-error: number | undefined in not assignable to number\r\n        const y: number = columns[i];\r\n\r\n        // @ts-expect-error: number | undefined in not assignable to number\r\n        const z: number = columns[0];\r\n\r\n        // @ts-expect-error: number[] | undefined in not assignable to number[]\r\n        const u: number[] = matrix[j];\r\n    }\r\n}\r\n```\r\n\r\nThe `assertArrayIndex` function cannot be called on tuples (since the accessing the elements is already well typed in them):\r\n```ts\r\nconst tuple = [5, 7] as const;\r\n\r\n// @ts-expect-error\r\nassertArrayIndex(tuple, 'tuple');\r\n```\r\n\r\n(Additional design considerations for the proposed API: [#925](https://github.com/type-challenges/type-challenges/issues/925#issuecomment-780889329).)\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/925/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/925/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"const matrix = [\r\n    [3, 4],\r\n    [5, 6],\r\n    [7, 8],\r\n];\r\n\r\nassertArrayIndex(matrix, 'rows');\r\n\r\nlet sum = 0;\r\n\r\nfor (let i = 0 as Index<typeof matrix>; i < matrix.length; i += 1) {\r\n    const columns: number[] = matrix[i];\r\n\r\n    // @ts-expect-error: number | undefined in not assignable to number\r\n    const x: number[] = matrix[0];\r\n\r\n    assertArrayIndex(columns, 'columns');\r\n\r\n    for (let j = 0 as Index<typeof columns>; j < columns.length; j += 1) {\r\n        sum += columns[j];\r\n\r\n        // @ts-expect-error: number | undefined in not assignable to number\r\n        const y: number = columns[i];\r\n\r\n        // @ts-expect-error: number | undefined in not assignable to number\r\n        const z: number = columns[0];\r\n\r\n        // @ts-expect-error: number[] | undefined in not assignable to number[]\r\n        const u: number[] = matrix[j];\r\n    }\r\n}\r\n\r\nconst a: string[] = [];\r\n\r\nassertArrayIndex(a, 'a');\r\n\r\nfor (let p = 0 as Index<typeof a>; p < a.length; p += 1) {\r\n    const value: string = a[p];\r\n\r\n    // @ts-expect-error: string | undefined is not assignable to string\r\n    const z: string = a[2];\r\n}\r\n\r\na.push('qux');\r\n// @ts-expect-error: number is not assignable to string\r\na.push(3);\r\n\r\nfor (const value of a) {\r\n    const other: string = value;\r\n}\r\n\r\nconst b: number[] = [];\r\n\r\nassertArrayIndex(b, 'b');\r\n\r\nfor (let p = 0 as Index<typeof a>; p < b.length; p += 1) {\r\n    // @ts-expect-error: number | undefined is not assignable to string\r\n    const value: string = b[p];\r\n}\r\n\r\nconst c: string[] = [];\r\n\r\nassertArrayIndex(c, 'c');\r\n\r\nfor (let p = 0; p < c.length; p += 1) {\r\n    // @ts-expect-error: string | undefined is not assignable to string\r\n    let value: string = c[p];\r\n\r\n    // @ts-expect-error: string | undefined is not assignable to string\r\n    value = c[0 as Index<typeof a>];\r\n}\r\n\r\nconst d: readonly number[] = [];\r\n\r\nassertArrayIndex(d, 'd');\r\n\r\nfor (let p = 0 as Index<typeof d>; p < d.length; p += 1) {\r\n    const value: number = d[p];\r\n\r\n    // @ts-expect-error: only permits reading\r\n    d[2] = 3;\r\n}\r\n\r\n// @ts-expect-error: push does not exist on readonly\r\nd.push(3);\r\n\r\nconst e: [number] = [0];\r\n\r\n// @ts-expect-error: [number] is not assignable to never\r\nassertArrayIndex(e, 'e');\r\n\r\nconst f: readonly [boolean] = [false];\r\n\r\n// @ts-expect-error: [boolean] is not assignable to never\r\nassertArrayIndex(f, 'f');\r\n\r\nconst tuple = [5, 7] as const;\r\n\r\n// @ts-expect-error: readonly [5, 7] is not assignable to never\r\nassertArrayIndex(tuple, 'tuple');\n","content":"function assertArrayIndex(array: readonly unknown[], key: string) {}\r\n\r\ntype Index<Array> = any\n"},{"dir":"949-medium-anyof","id":"949","challenge":"medium","info":{"difficulty":"medium","title":"AnyOf","tags":"array","author":{"github":"kynefuk","name":null}},"prefix":"<!--info-header-start--><h1>AnyOf <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/></h1><blockquote><p>by null <a href=\"https://github.com/kynefuk\" target=\"_blank\">@kynefuk</a></p></blockquote><p><a href=\"https://tsch.js.org/949/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement Python liked `any` function in the type system. A type takes the Array and returns `true` if any element of the Array is true. If the Array is empty, return `false`.\r\n\r\nFor example:\r\n\r\n```ts\r\ntype Sample1 = AnyOf<[1, \"\", false, [], {}]>; // expected to be true.\r\ntype Sample2 = AnyOf<[0, \"\", false, [], {}]>; // expected to be false.\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/949/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/949/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<AnyOf<[1, 'test', true, [1], {name: 'test'}, {1: 'test'}]>, true>>,\r\n  Expect<Equal<AnyOf<[1, '', false, [], {}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, 'test', false, [], {}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', true, [], {}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [1], {}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [], {name: 'test'}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [], {1: 'test'}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [], {name: 'test'}, {1: 'test'}]>, true>>,\r\n  Expect<Equal<AnyOf<[0, '', false, [], {}]>, false>>,\r\n  Expect<Equal<AnyOf<[]>, false>>,\r\n]\n","content":"type AnyOf<T extends readonly any[]> = any;\n"},{"dir":"956-hard-deeppick","id":"956","challenge":"hard","info":{"difficulty":"hard","title":"DeepPick","tags":"deep","author":{"github":"hiroyaiizuka","name":"hiroya iizuka"}},"prefix":"<!--info-header-start--><h1>DeepPick <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23deep-999\" alt=\"#deep\"/></h1><blockquote><p>by hiroya iizuka <a href=\"https://github.com/hiroyaiizuka\" target=\"_blank\">@hiroyaiizuka</a></p></blockquote><p><a href=\"https://tsch.js.org/956/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\n\nImplement a type DeepPick, that extends Utility types `Pick`.\r\nA type takes two arguments.\r\n\r\n\r\nFor example:\r\n\r\n```\r\n\r\ntype obj = {\r\n  name: 'hoge', \r\n  age: 20,\r\n  friend: {\r\n    name: 'fuga',\r\n    age: 30,\r\n    family: {\r\n      name: 'baz',  \r\n      age: 1 \r\n    }\r\n  }\r\n}\r\n\r\ntype T1 = DeepPick<obj, 'name'>   // { name : 'hoge' }\r\ntype T2 = DeepPick<obj, 'name' | 'friend.name'>  // { name : 'hoge' } & { friend: { name: 'fuga' }}\r\ntype T3 = DeepPick<obj, 'name' | 'friend.name' |  'friend.family.name'>  // { name : 'hoge' } &  { friend: { name: 'fuga' }} & { friend: { family: { name: 'baz' }}}\r\n\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/956/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/956/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect, ExpectFalse, NotEqual } from '@type-challenges/utils'\r\n\r\ntype Obj = {\r\n  a: number,\r\n  b: string,\r\n  c:  boolean,\r\n  obj: {\r\n    d: number,\r\n    e: string,\r\n    f:  boolean,\r\n    obj2: {\r\n      g: number,\r\n      h: string,\r\n      i: boolean,\r\n    }\r\n  },\r\n  obj3: {\r\n    j: number,\r\n    k: string,\r\n    l: boolean,\r\n  }\r\n}\r\n\r\ntype cases = [\r\n  Expect<Equal<DeepPick<Obj, ''>, unknown >>,\r\n  Expect<Equal<DeepPick<Obj, 'a'>, { a: number }>>,\r\n  Expect<Equal<DeepPick<Obj, 'a' | 'obj.e'>, { a: number } & { obj: { e: string }}>>,\r\n  Expect<Equal<DeepPick<Obj, 'a' | 'obj.e' | 'obj.obj2.i'>, { a: number } & { obj: { e: string }} & { obj: { obj2: { i: boolean } }}>>,\r\n]\n","content":"type DeepPick = any\n"}]},"__N_SSG":true}