{"pageProps":{"dir":"270-hard-typed-get","id":"270","challenge":"hard","info":{"difficulty":"hard","title":"Typed Get","tags":"utils, template-literal","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Typed Get <img src=\"https://img.shields.io/badge/-hard-de3d37\" alt=\"hard\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/> <img src=\"https://img.shields.io/badge/-%23template--literal-999\" alt=\"#template-literal\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/270/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nThe [`get` function in lodash](https://lodash.com/docs/4.17.15#get) is a quite convenient helper for accessing nested values in JavaScript. However, when we come to TypeScript, using functions like this will make you lose the type information. With TS 4.1's upcoming [Template Literal Types](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#template-literal-types) feature, properly typing `get` becomes possible. Can you implement it?\r\n\r\nFor example,\r\n\r\n```ts\r\ntype Data = {\r\n  foo: {\r\n    bar: {\r\n      value: 'foobar',\r\n      count: 6,\r\n    },\r\n    included: true,\r\n  },\r\n  hello: 'world'\r\n}\r\n  \r\ntype A = Get<Data, 'hello'> // 'world'\r\ntype B = Get<Data, 'foo.bar.count'> // 6\r\ntype C = Get<Data, 'foo.bar'> // { value: 'foobar', count: 6 }\r\n```\r\n\r\nAccessing arrays is not required in this challenge.\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/270/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/270/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<Get<Data, 'hello'>, 'world'>>,\r\n  Expect<Equal<Get<Data, 'foo.bar.count'>, 6>>,\r\n  Expect<Equal<Get<Data, 'foo.bar'>, { value: 'foobar', count: 6 }>>,\r\n\r\n  Expect<Equal<Get<Data, 'no.existed'>, never>>,\r\n]\r\n\r\ntype Data = {\r\n  foo: {\r\n    bar: {\r\n      value: 'foobar',\r\n      count: 6,\r\n    },\r\n    included: true,\r\n  },\r\n  hello: 'world'\r\n}\n","content":"type Get<T, K> = string\n"},"__N_SSG":true}