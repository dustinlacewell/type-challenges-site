{"pageProps":{"dir":"20-medium-promise-all","id":"20","challenge":"medium","info":{"difficulty":"medium","title":"Promise.all","tags":"array, built-in","author":{"github":"antfu","name":"Anthony Fu"}},"prefix":"<!--info-header-start--><h1>Promise.all <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23array-999\" alt=\"#array\"/> <img src=\"https://img.shields.io/badge/-%23built--in-999\" alt=\"#built-in\"/></h1><blockquote><p>by Anthony Fu <a href=\"https://github.com/antfu\" target=\"_blank\">@antfu</a></p></blockquote><p><a href=\"https://tsch.js.org/20/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> &nbsp;&nbsp;&nbsp;<a href=\"./README.zh-CN.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-gray\" alt=\"简体中文\"/></a>  <a href=\"./README.ja.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-%E6%97%A5%E6%9C%AC%E8%AA%9E-gray\" alt=\"日本語\"/></a> </p><!--info-header-end-->\n\nType the function `PromiseAll` that accepts an array of PromiseLike objects, the returning value should be `Promise<T>` where `T` is the resolved result array.\r\n\r\n```ts\r\nconst promise1 = Promise.resolve(3);\r\nconst promise2 = 42;\r\nconst promise3 = new Promise<string>((resolve, reject) => {\r\n  setTimeout(resolve, 100, 'foo');\r\n});\r\n\r\n// expected to be `Promise<[number, number, string]>`\r\nconst p = Promise.all([promise1, promise2, promise3] as const)\r\n```\n\n\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/20/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/20/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\nconst promiseAllTest1 = PromiseAll([1, 2, 3] as const)\r\nconst promiseAllTest2 = PromiseAll([1, 2, Promise.resolve(3)] as const)\r\nconst promiseAllTest3 = PromiseAll([1, 2, Promise.resolve(3)])\r\n\r\ntype cases = [\r\n  Expect<Equal<typeof promiseAllTest1, Promise<[1, 2, 3]>>>,\r\n  Expect<Equal<typeof promiseAllTest2, Promise<[1, 2, number]>>>,\r\n  Expect<Equal<typeof promiseAllTest3, Promise<[number, number, number]>>>\r\n]\r\n","content":"declare function PromiseAll(values: any): any\n"},"__N_SSG":true}