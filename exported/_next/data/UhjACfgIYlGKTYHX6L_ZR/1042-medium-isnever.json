{"pageProps":{"dir":"1042-medium-isnever","id":"1042","challenge":"medium","info":{"difficulty":"medium","title":"IsNever","tags":"union, utils","author":{"github":"hiroyaiizuka","name":"hiroya iizuka"}},"prefix":"<!--info-header-start--><h1>IsNever <img src=\"https://img.shields.io/badge/-medium-d9901a\" alt=\"medium\"/> <img src=\"https://img.shields.io/badge/-%23union-999\" alt=\"#union\"/> <img src=\"https://img.shields.io/badge/-%23utils-999\" alt=\"#utils\"/></h1><blockquote><p>by hiroya iizuka <a href=\"https://github.com/hiroyaiizuka\" target=\"_blank\">@hiroyaiizuka</a></p></blockquote><p><a href=\"https://tsch.js.org/1042/play\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Take%20the%20Challenge-3178c6?logo=typescript&logoColor=white\" alt=\"Take the Challenge\"/></a> </p><!--info-header-end-->\r\n\r\nImplement a type IsNever, which takes input type `T`.\r\nIf the type of resolves to `never`, return `true`, otherwise `false`.\r\n\r\nFor example:\r\n\r\n```ts\r\ntype A = IsNever<never>  // expected to be true\r\ntype B = IsNever<undefined> // expected to be false\r\ntype C = IsNever<null> // expected to be false\r\ntype D = IsNever<[]> // expected to be false\r\ntype E = IsNever<number> // expected to be false\r\n```\r\n\r\n\r\n<!--info-footer-start--><br><a href=\"../../README.md\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Back-grey\" alt=\"Back\"/></a> <a href=\"https://tsch.js.org/1042/answer\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Share%20your%20Solutions-teal\" alt=\"Share your Solutions\"/></a> <a href=\"https://tsch.js.org/1042/solutions\" target=\"_blank\"><img src=\"https://img.shields.io/badge/-Check%20out%20Solutions-de5a77?logo=awesome-lists&logoColor=white\" alt=\"Check out Solutions\"/></a> <!--info-footer-end-->\r\n","suffix":"import { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<IsNever<never>, true>>,\r\n  Expect<Equal<IsNever<never | string>, false>>,\r\n  Expect<Equal<IsNever<\"\">, false>>,\r\n  Expect<Equal<IsNever<undefined>, false>>,\r\n  Expect<Equal<IsNever<null>, false>>,\r\n  Expect<Equal<IsNever<[]>, false>>,\r\n  Expect<Equal<IsNever<{}>, false>>,\r\n]\r\n","content":"type IsNever = any\n"},"__N_SSG":true}